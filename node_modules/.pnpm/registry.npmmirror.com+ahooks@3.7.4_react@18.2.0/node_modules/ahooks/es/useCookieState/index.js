import { __rest } from "tslib";
import Cookies from 'js-cookie';
import { useState } from 'react';
import useMemoizedFn from '../useMemoizedFn';
import { isFunction, isString } from '../utils';
function useCookieState(cookieKey, options = {}) {
  const [state, setState] = useState(() => {
    const cookieValue = Cookies.get(cookieKey);
    if (isString(cookieValue)) return cookieValue;
    if (isFunction(options.defaultValue)) {
      return options.defaultValue();
    }
    return options.defaultValue;
  });
  const updateState = useMemoizedFn((newValue, newOptions = {}) => {
    const _a = Object.assign(Object.assign({}, options), newOptions),
      {
        defaultValue
      } = _a,
      restOptions = __rest(_a, ["defaultValue"]);
    setState(prevState => {
      const value = isFunction(newValue) ? newValue(prevState) : newValue;
      if (value === undefined) {
        Cookies.remove(cookieKey);
      } else {
        Cookies.set(cookieKey, value, restOptions);
      }
      return value;
    });
  });
  return [state, updateState];
}
export default useCookieState;