{"ast":null,"code":"import 'intersection-observer';\nimport { useState } from 'react';\nimport { getTargetElement } from '../utils/domTarget';\nimport useEffectWithTarget from '../utils/useEffectWithTarget';\nfunction useInViewport(target, options) {\n  const [state, setState] = useState();\n  const [ratio, setRatio] = useState();\n  useEffectWithTarget(() => {\n    const el = getTargetElement(target);\n    if (!el) {\n      return;\n    }\n    const observer = new IntersectionObserver(entries => {\n      for (const entry of entries) {\n        setRatio(entry.intersectionRatio);\n        setState(entry.isIntersecting);\n      }\n    }, Object.assign(Object.assign({}, options), {\n      root: getTargetElement(options === null || options === void 0 ? void 0 : options.root)\n    }));\n    observer.observe(el);\n    return () => {\n      observer.disconnect();\n    };\n  }, [options === null || options === void 0 ? void 0 : options.rootMargin, options === null || options === void 0 ? void 0 : options.threshold], target);\n  return [state, ratio];\n}\nexport default useInViewport;","map":{"version":3,"names":["useState","getTargetElement","useEffectWithTarget","useInViewport","target","options","state","setState","ratio","setRatio","el","observer","IntersectionObserver","entries","entry","intersectionRatio","isIntersecting","Object","assign","root","observe","disconnect","rootMargin","threshold"],"sources":["/Users/yangdan/zf-workspace/react/suika/node_modules/.pnpm/registry.npmmirror.com+ahooks@3.7.4_react@18.2.0/node_modules/ahooks/es/useInViewport/index.js"],"sourcesContent":["import 'intersection-observer';\nimport { useState } from 'react';\nimport { getTargetElement } from '../utils/domTarget';\nimport useEffectWithTarget from '../utils/useEffectWithTarget';\nfunction useInViewport(target, options) {\n  const [state, setState] = useState();\n  const [ratio, setRatio] = useState();\n  useEffectWithTarget(() => {\n    const el = getTargetElement(target);\n    if (!el) {\n      return;\n    }\n    const observer = new IntersectionObserver(entries => {\n      for (const entry of entries) {\n        setRatio(entry.intersectionRatio);\n        setState(entry.isIntersecting);\n      }\n    }, Object.assign(Object.assign({}, options), {\n      root: getTargetElement(options === null || options === void 0 ? void 0 : options.root)\n    }));\n    observer.observe(el);\n    return () => {\n      observer.disconnect();\n    };\n  }, [options === null || options === void 0 ? void 0 : options.rootMargin, options === null || options === void 0 ? void 0 : options.threshold], target);\n  return [state, ratio];\n}\nexport default useInViewport;"],"mappings":"AAAA,OAAO,uBAAuB;AAC9B,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,SAASC,aAAaA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC;EACpC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC;EACpCE,mBAAmB,CAAC,MAAM;IACxB,MAAMQ,EAAE,GAAGT,gBAAgB,CAACG,MAAM,CAAC;IACnC,IAAI,CAACM,EAAE,EAAE;MACP;IACF;IACA,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAACC,OAAO,IAAI;MACnD,KAAK,MAAMC,KAAK,IAAID,OAAO,EAAE;QAC3BJ,QAAQ,CAACK,KAAK,CAACC,iBAAiB,CAAC;QACjCR,QAAQ,CAACO,KAAK,CAACE,cAAc,CAAC;MAChC;IACF,CAAC,EAAEC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEb,OAAO,CAAC,EAAE;MAC3Cc,IAAI,EAAElB,gBAAgB,CAACI,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,IAAI;IACvF,CAAC,CAAC,CAAC;IACHR,QAAQ,CAACS,OAAO,CAACV,EAAE,CAAC;IACpB,OAAO,MAAM;MACXC,QAAQ,CAACU,UAAU,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAAChB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACiB,UAAU,EAAEjB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACkB,SAAS,CAAC,EAAEnB,MAAM,CAAC;EACvJ,OAAO,CAACE,KAAK,EAAEE,KAAK,CAAC;AACvB;AACA,eAAeL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}