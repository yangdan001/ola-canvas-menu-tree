{"ast":null,"code":"const x = 3;\nconst y = 2;\nconst z = 1;\nconst defaultData = [];\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || defaultData;\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({\n      title: key,\n      key\n    });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\nconsole.log('defaultData', defaultData);\n// const App: React.FC = () => {\n//   const [gData, setGData] = useState(defaultData);\n//   const [expandedKeys] = useState(['0-0', '0-0-0', '0-0-0-0']);\n\n//   const onDragEnter: TreeProps['onDragEnter'] = (info) => {\n//     console.log(info);\n//     // expandedKeys, set it when controlled is needed\n//     // setExpandedKeys(info.expandedKeys)\n//   };\n\n//   const onDrop: TreeProps['onDrop'] = (info) => {\n//     console.log(info);\n//     const dropKey = info.node.key;\n//     const dragKey = info.dragNode.key;\n//     const dropPos = info.node.pos.split('-');\n//     const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n//     const loop = (\n//       data: DataNode[],\n//       key: React.Key,\n//       callback: (node: DataNode, i: number, data: DataNode[]) => void,\n//     ) => {\n//       for (let i = 0; i < data.length; i++) {\n//         if (data[i].key === key) {\n//           return callback(data[i], i, data);\n//         }\n//         if (data[i].children) {\n//           loop(data[i].children!, key, callback);\n//         }\n//       }\n//     };\n//     const data = [...gData];\n\n//     // Find dragObject\n//     let dragObj: DataNode;\n//     loop(data, dragKey, (item, index, arr) => {\n//       arr.splice(index, 1);\n//       dragObj = item;\n//     });\n\n//     if (!info.dropToGap) {\n//       // Drop on the content\n//       loop(data, dropKey, (item) => {\n//         item.children = item.children || [];\n//         // where to insert. New item was inserted to the start of the array in this example, but can be anywhere\n//         item.children.unshift(dragObj);\n//       });\n//     } else if (\n//       ((info.node as any).props.children || []).length > 0 && // Has children\n//       (info.node as any).props.expanded && // Is expanded\n//       dropPosition === 1 // On the bottom gap\n//     ) {\n//       loop(data, dropKey, (item) => {\n//         item.children = item.children || [];\n//         // where to insert. New item was inserted to the start of the array in this example, but can be anywhere\n//         item.children.unshift(dragObj);\n//         // in previous version, we use item.children.push(dragObj) to insert the\n//         // item to the tail of the children\n//       });\n//     } else {\n//       let ar: DataNode[] = [];\n//       let i: number;\n//       loop(data, dropKey, (_item, index, arr) => {\n//         ar = arr;\n//         i = index;\n//       });\n//       if (dropPosition === -1) {\n//         ar.splice(i!, 0, dragObj!);\n//       } else {\n//         ar.splice(i! + 1, 0, dragObj!);\n//       }\n//     }\n//     setGData(data);\n//   };\n\n//   return (\n//     <Tree\n//       className=\"draggable-tree\"\n//       defaultExpandedKeys={expandedKeys}\n//       draggable\n//       blockNode\n//       onDragEnter={onDragEnter}\n//       onDrop={onDrop}\n//       treeData={gData}\n//     />\n//   );\n// };\n\n// export default App;\nexport {};","map":{"version":3,"names":["x","y","z","defaultData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","console","log"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/LeftTreeMenu/index.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { Tree } from 'antd';\nimport type { DataNode, TreeProps } from 'antd/es/tree';\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst defaultData: DataNode[] = [];\n\nconst generateData = (_level: number, _preKey?: React.Key, _tns?: DataNode[]) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || defaultData;\n\n  const children: React.Key[] = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\nconsole.log('defaultData',defaultData);\n// const App: React.FC = () => {\n//   const [gData, setGData] = useState(defaultData);\n//   const [expandedKeys] = useState(['0-0', '0-0-0', '0-0-0-0']);\n\n//   const onDragEnter: TreeProps['onDragEnter'] = (info) => {\n//     console.log(info);\n//     // expandedKeys, set it when controlled is needed\n//     // setExpandedKeys(info.expandedKeys)\n//   };\n\n//   const onDrop: TreeProps['onDrop'] = (info) => {\n//     console.log(info);\n//     const dropKey = info.node.key;\n//     const dragKey = info.dragNode.key;\n//     const dropPos = info.node.pos.split('-');\n//     const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n//     const loop = (\n//       data: DataNode[],\n//       key: React.Key,\n//       callback: (node: DataNode, i: number, data: DataNode[]) => void,\n//     ) => {\n//       for (let i = 0; i < data.length; i++) {\n//         if (data[i].key === key) {\n//           return callback(data[i], i, data);\n//         }\n//         if (data[i].children) {\n//           loop(data[i].children!, key, callback);\n//         }\n//       }\n//     };\n//     const data = [...gData];\n\n//     // Find dragObject\n//     let dragObj: DataNode;\n//     loop(data, dragKey, (item, index, arr) => {\n//       arr.splice(index, 1);\n//       dragObj = item;\n//     });\n\n//     if (!info.dropToGap) {\n//       // Drop on the content\n//       loop(data, dropKey, (item) => {\n//         item.children = item.children || [];\n//         // where to insert. New item was inserted to the start of the array in this example, but can be anywhere\n//         item.children.unshift(dragObj);\n//       });\n//     } else if (\n//       ((info.node as any).props.children || []).length > 0 && // Has children\n//       (info.node as any).props.expanded && // Is expanded\n//       dropPosition === 1 // On the bottom gap\n//     ) {\n//       loop(data, dropKey, (item) => {\n//         item.children = item.children || [];\n//         // where to insert. New item was inserted to the start of the array in this example, but can be anywhere\n//         item.children.unshift(dragObj);\n//         // in previous version, we use item.children.push(dragObj) to insert the\n//         // item to the tail of the children\n//       });\n//     } else {\n//       let ar: DataNode[] = [];\n//       let i: number;\n//       loop(data, dropKey, (_item, index, arr) => {\n//         ar = arr;\n//         i = index;\n//       });\n//       if (dropPosition === -1) {\n//         ar.splice(i!, 0, dragObj!);\n//       } else {\n//         ar.splice(i! + 1, 0, dragObj!);\n//       }\n//     }\n//     setGData(data);\n//   };\n\n//   return (\n//     <Tree\n//       className=\"draggable-tree\"\n//       defaultExpandedKeys={expandedKeys}\n//       draggable\n//       blockNode\n//       onDragEnter={onDragEnter}\n//       onDrop={onDrop}\n//       treeData={gData}\n//     />\n//   );\n// };\n\n// export default App;"],"mappings":"AAIA,MAAMA,CAAC,GAAG,CAAC;AACX,MAAMC,CAAC,GAAG,CAAC;AACX,MAAMC,CAAC,GAAG,CAAC;AACX,MAAMC,WAAuB,GAAG,EAAE;AAElC,MAAMC,YAAY,GAAGA,CAACC,MAAc,EAAEC,OAAmB,EAAEC,IAAiB,KAAK;EAC/E,MAAMC,MAAM,GAAGF,OAAO,IAAI,GAAG;EAC7B,MAAMG,GAAG,GAAGF,IAAI,IAAIJ,WAAW;EAE/B,MAAMO,QAAqB,GAAG,EAAE;EAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,EAAEW,CAAC,EAAE,EAAE;IAC1B,MAAMC,GAAG,GAAI,GAAEJ,MAAO,IAAGG,CAAE,EAAC;IAC5BF,GAAG,CAACI,IAAI,CAAC;MAAEC,KAAK,EAAEF,GAAG;MAAEA;IAAI,CAAC,CAAC;IAC7B,IAAID,CAAC,GAAGV,CAAC,EAAE;MACTS,QAAQ,CAACG,IAAI,CAACD,GAAG,CAAC;IACpB;EACF;EACA,IAAIP,MAAM,GAAG,CAAC,EAAE;IACd,OAAOI,GAAG;EACZ;EACA,MAAMM,KAAK,GAAGV,MAAM,GAAG,CAAC;EACxBK,QAAQ,CAACM,OAAO,CAAC,CAACJ,GAAG,EAAEK,KAAK,KAAK;IAC/BR,GAAG,CAACQ,KAAK,CAAC,CAACP,QAAQ,GAAG,EAAE;IACxB,OAAON,YAAY,CAACW,KAAK,EAAEH,GAAG,EAAEH,GAAG,CAACQ,KAAK,CAAC,CAACP,QAAQ,CAAC;EACtD,CAAC,CAAC;AACJ,CAAC;AACDN,YAAY,CAACF,CAAC,CAAC;AACfgB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAChB,WAAW,CAAC;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}