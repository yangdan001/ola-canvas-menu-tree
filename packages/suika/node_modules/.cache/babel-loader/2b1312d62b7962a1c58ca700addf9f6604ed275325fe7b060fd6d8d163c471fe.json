{"ast":null,"code":"import { getClosestTimesVal, nearestPixelVal } from '../utils/common';\n/**\n * draw grid\n */\nclass Grid {\n  constructor(editor) {\n    this.editor = editor;\n    this.step = 1;\n  }\n  draw() {\n    const ctx = this.editor.ctx;\n    const {\n      x: offsetX,\n      y: offsetY,\n      width,\n      height\n    } = this.editor.viewportManager.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    const setting = this.editor.setting;\n    const step = this.step;\n\n    /*** draw vertical lines ***/\n    let startXInScene = getClosestTimesVal(offsetX, step);\n    const endXInScene = getClosestTimesVal(offsetX + width / zoom, step);\n    while (startXInScene <= endXInScene) {\n      ctx.strokeStyle = setting.get('pixelGridLineColor');\n      const x = nearestPixelVal((startXInScene - offsetX) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n      ctx.closePath();\n      startXInScene += step;\n    }\n\n    /*** draw horizontal lines ***/\n    let startYInScene = getClosestTimesVal(offsetY, step);\n    const endYInScene = getClosestTimesVal(offsetY + height / zoom, step);\n    while (startYInScene <= endYInScene) {\n      ctx.strokeStyle = setting.get('pixelGridLineColor');\n      const y = nearestPixelVal((startYInScene - offsetY) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n      ctx.closePath();\n      startYInScene += step;\n    }\n  }\n}\nexport default Grid;","map":{"version":3,"names":["getClosestTimesVal","nearestPixelVal","Grid","constructor","editor","step","draw","ctx","x","offsetX","y","offsetY","width","height","viewportManager","getViewport","zoom","zoomManager","getZoom","setting","startXInScene","endXInScene","strokeStyle","get","beginPath","moveTo","lineTo","stroke","closePath","startYInScene","endYInScene"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/grid.ts"],"sourcesContent":["import { getClosestTimesVal, nearestPixelVal } from '../utils/common';\nimport { Editor } from './editor';\n\n/**\n * draw grid\n */\nclass Grid {\n  private step = 1;\n  constructor(private editor: Editor) {}\n  draw() {\n    const ctx = this.editor.ctx;\n\n    const {\n      x: offsetX,\n      y: offsetY,\n      width,\n      height,\n    } = this.editor.viewportManager.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    const setting = this.editor.setting;\n    const step = this.step;\n\n    /*** draw vertical lines ***/\n    let startXInScene = getClosestTimesVal(offsetX, step);\n    const endXInScene = getClosestTimesVal(offsetX + width / zoom, step);\n\n    while (startXInScene <= endXInScene) {\n      ctx.strokeStyle = setting.get('pixelGridLineColor');\n      const x = nearestPixelVal((startXInScene - offsetX) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n      ctx.closePath();\n      startXInScene += step;\n    }\n\n    /*** draw horizontal lines ***/\n    let startYInScene = getClosestTimesVal(offsetY, step);\n    const endYInScene = getClosestTimesVal(offsetY + height / zoom, step);\n\n    while (startYInScene <= endYInScene) {\n      ctx.strokeStyle = setting.get('pixelGridLineColor');\n      const y = nearestPixelVal((startYInScene - offsetY) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n      ctx.closePath();\n      startYInScene += step;\n    }\n  }\n}\n\nexport default Grid;\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,eAAe,QAAQ,iBAAiB;AAGrE;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EAETC,WAAWA,CAASC,MAAc,EAAE;IAAA,KAAhBA,MAAc,GAAdA,MAAc;IAAA,KAD1BC,IAAI,GAAG,CAAC;EACqB;EACrCC,IAAIA,CAAA,EAAG;IACL,MAAMC,GAAG,GAAG,IAAI,CAACH,MAAM,CAACG,GAAG;IAE3B,MAAM;MACJC,CAAC,EAAEC,OAAO;MACVC,CAAC,EAAEC,OAAO;MACVC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAACT,MAAM,CAACU,eAAe,CAACC,WAAW,CAAC,CAAC;IAC7C,MAAMC,IAAI,GAAG,IAAI,CAACZ,MAAM,CAACa,WAAW,CAACC,OAAO,CAAC,CAAC;IAC9C,MAAMC,OAAO,GAAG,IAAI,CAACf,MAAM,CAACe,OAAO;IACnC,MAAMd,IAAI,GAAG,IAAI,CAACA,IAAI;;IAEtB;IACA,IAAIe,aAAa,GAAGpB,kBAAkB,CAACS,OAAO,EAAEJ,IAAI,CAAC;IACrD,MAAMgB,WAAW,GAAGrB,kBAAkB,CAACS,OAAO,GAAGG,KAAK,GAAGI,IAAI,EAAEX,IAAI,CAAC;IAEpE,OAAOe,aAAa,IAAIC,WAAW,EAAE;MACnCd,GAAG,CAACe,WAAW,GAAGH,OAAO,CAACI,GAAG,CAAC,oBAAoB,CAAC;MACnD,MAAMf,CAAC,GAAGP,eAAe,CAAC,CAACmB,aAAa,GAAGX,OAAO,IAAIO,IAAI,CAAC;MAC3DT,GAAG,CAACiB,SAAS,CAAC,CAAC;MACfjB,GAAG,CAACkB,MAAM,CAACjB,CAAC,EAAE,CAAC,CAAC;MAChBD,GAAG,CAACmB,MAAM,CAAClB,CAAC,EAAEK,MAAM,CAAC;MACrBN,GAAG,CAACoB,MAAM,CAAC,CAAC;MACZpB,GAAG,CAACqB,SAAS,CAAC,CAAC;MACfR,aAAa,IAAIf,IAAI;IACvB;;IAEA;IACA,IAAIwB,aAAa,GAAG7B,kBAAkB,CAACW,OAAO,EAAEN,IAAI,CAAC;IACrD,MAAMyB,WAAW,GAAG9B,kBAAkB,CAACW,OAAO,GAAGE,MAAM,GAAGG,IAAI,EAAEX,IAAI,CAAC;IAErE,OAAOwB,aAAa,IAAIC,WAAW,EAAE;MACnCvB,GAAG,CAACe,WAAW,GAAGH,OAAO,CAACI,GAAG,CAAC,oBAAoB,CAAC;MACnD,MAAMb,CAAC,GAAGT,eAAe,CAAC,CAAC4B,aAAa,GAAGlB,OAAO,IAAIK,IAAI,CAAC;MAC3DT,GAAG,CAACiB,SAAS,CAAC,CAAC;MACfjB,GAAG,CAACkB,MAAM,CAAC,CAAC,EAAEf,CAAC,CAAC;MAChBH,GAAG,CAACmB,MAAM,CAACd,KAAK,EAAEF,CAAC,CAAC;MACpBH,GAAG,CAACoB,MAAM,CAAC,CAAC;MACZpB,GAAG,CAACqB,SAAS,CAAC,CAAC;MACfC,aAAa,IAAIxB,IAAI;IACvB;EACF;AACF;AAEA,eAAeH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}