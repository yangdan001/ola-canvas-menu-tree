{"ast":null,"code":"import { useMemo, useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nexport default function useSelections(items, defaultSelected = []) {\n  const [selected, setSelected] = useState(defaultSelected);\n  const selectedSet = useMemo(() => new Set(selected), [selected]);\n  const isSelected = item => selectedSet.has(item);\n  const select = item => {\n    selectedSet.add(item);\n    return setSelected(Array.from(selectedSet));\n  };\n  const unSelect = item => {\n    selectedSet.delete(item);\n    return setSelected(Array.from(selectedSet));\n  };\n  const toggle = item => {\n    if (isSelected(item)) {\n      unSelect(item);\n    } else {\n      select(item);\n    }\n  };\n  const selectAll = () => {\n    items.forEach(o => {\n      selectedSet.add(o);\n    });\n    setSelected(Array.from(selectedSet));\n  };\n  const unSelectAll = () => {\n    items.forEach(o => {\n      selectedSet.delete(o);\n    });\n    setSelected(Array.from(selectedSet));\n  };\n  const noneSelected = useMemo(() => items.every(o => !selectedSet.has(o)), [items, selectedSet]);\n  const allSelected = useMemo(() => items.every(o => selectedSet.has(o)) && !noneSelected, [items, selectedSet, noneSelected]);\n  const partiallySelected = useMemo(() => !noneSelected && !allSelected, [noneSelected, allSelected]);\n  const toggleAll = () => allSelected ? unSelectAll() : selectAll();\n  return {\n    selected,\n    noneSelected,\n    allSelected,\n    partiallySelected,\n    setSelected,\n    isSelected,\n    select: useMemoizedFn(select),\n    unSelect: useMemoizedFn(unSelect),\n    toggle: useMemoizedFn(toggle),\n    selectAll: useMemoizedFn(selectAll),\n    unSelectAll: useMemoizedFn(unSelectAll),\n    toggleAll: useMemoizedFn(toggleAll)\n  };\n}","map":{"version":3,"names":["useMemo","useState","useMemoizedFn","useSelections","items","defaultSelected","selected","setSelected","selectedSet","Set","isSelected","item","has","select","add","Array","from","unSelect","delete","toggle","selectAll","forEach","o","unSelectAll","noneSelected","every","allSelected","partiallySelected","toggleAll"],"sources":["/Users/yangdan/zf-workspace/react/suika/node_modules/.pnpm/registry.npmmirror.com+ahooks@3.7.4_react@18.2.0/node_modules/ahooks/es/useSelections/index.js"],"sourcesContent":["import { useMemo, useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nexport default function useSelections(items, defaultSelected = []) {\n  const [selected, setSelected] = useState(defaultSelected);\n  const selectedSet = useMemo(() => new Set(selected), [selected]);\n  const isSelected = item => selectedSet.has(item);\n  const select = item => {\n    selectedSet.add(item);\n    return setSelected(Array.from(selectedSet));\n  };\n  const unSelect = item => {\n    selectedSet.delete(item);\n    return setSelected(Array.from(selectedSet));\n  };\n  const toggle = item => {\n    if (isSelected(item)) {\n      unSelect(item);\n    } else {\n      select(item);\n    }\n  };\n  const selectAll = () => {\n    items.forEach(o => {\n      selectedSet.add(o);\n    });\n    setSelected(Array.from(selectedSet));\n  };\n  const unSelectAll = () => {\n    items.forEach(o => {\n      selectedSet.delete(o);\n    });\n    setSelected(Array.from(selectedSet));\n  };\n  const noneSelected = useMemo(() => items.every(o => !selectedSet.has(o)), [items, selectedSet]);\n  const allSelected = useMemo(() => items.every(o => selectedSet.has(o)) && !noneSelected, [items, selectedSet, noneSelected]);\n  const partiallySelected = useMemo(() => !noneSelected && !allSelected, [noneSelected, allSelected]);\n  const toggleAll = () => allSelected ? unSelectAll() : selectAll();\n  return {\n    selected,\n    noneSelected,\n    allSelected,\n    partiallySelected,\n    setSelected,\n    isSelected,\n    select: useMemoizedFn(select),\n    unSelect: useMemoizedFn(unSelect),\n    toggle: useMemoizedFn(toggle),\n    selectAll: useMemoizedFn(selectAll),\n    unSelectAll: useMemoizedFn(unSelectAll),\n    toggleAll: useMemoizedFn(toggleAll)\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}