{"ast":null,"code":"import { HALF_PI } from '../constant';\nimport { rotateInCanvas } from '../utils/canvas';\nimport { getClosestTimesVal, nearestPixelVal } from '../utils/common';\nconst getStepByZoom = zoom => {\n  /**\n   * 步长研究，参考 figma\n   * 1\n   * 2\n   * 5\n   * 10（对应 500% 往上） 找到规律了： 50 / zoom = 步长\n   * 25（对应 200% 往上）\n   * 50（对应 100% 往上）\n   * 100（对应 50% 往上）\n   * 250\n   * 500\n   * 1000\n   * 2500\n   * 5000\n   */\n  const steps = [1, 2, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000];\n  const step = 50 / zoom;\n  for (let i = 0, len = steps.length; i < len; i++) {\n    if (steps[i] >= step) return steps[i];\n  }\n  return steps[0];\n};\nclass Ruler {\n  constructor(editor) {\n    this.editor = editor;\n    this.visible = false;\n  }\n  open() {\n    this.visible = true;\n  }\n  close() {\n    this.visible = false;\n  }\n  draw() {\n    const setting = this.editor.setting;\n    const ctx = this.editor.ctx;\n    const viewport = this.editor.viewportManager.getViewport();\n    const {\n      width: viewportWidth,\n      height: viewportHeight\n    } = viewport;\n    ctx.save();\n    // 绘制背景\n    ctx.fillStyle = setting.get('rulerBgColor');\n    ctx.fillRect(0, 0, viewportWidth, setting.get('rulerWidth'));\n    ctx.fillRect(0, 0, setting.get('rulerWidth'), viewportHeight);\n    this.drawXRuler();\n    this.drawYRuler();\n\n    // 把左上角的小矩形上的刻度盖掉\n    ctx.fillStyle = setting.get('rulerBgColor');\n    ctx.fillRect(0, 0, setting.get('rulerWidth'), setting.get('rulerWidth'));\n\n    // 绘制 border\n    ctx.strokeStyle = setting.get('rulerStroke');\n    ctx.beginPath();\n    // 水平 border\n    ctx.moveTo(0, setting.get('rulerWidth') + 0.5);\n    ctx.lineTo(viewportWidth, setting.get('rulerWidth') + 0.5);\n    ctx.stroke();\n    ctx.closePath();\n    // 垂直 border\n    ctx.beginPath();\n    ctx.moveTo(setting.get('rulerWidth') + 0.5, 0);\n    ctx.lineTo(setting.get('rulerWidth') + 0.5, viewportHeight);\n    ctx.stroke();\n    ctx.closePath();\n    ctx.restore();\n  }\n  drawXRuler() {\n    // 绘制刻度线和刻度值\n    // 计算 x 轴起点和终点范围\n    const setting = this.editor.setting;\n    const ctx = this.editor.ctx;\n    const zoom = this.editor.zoomManager.getZoom();\n    const viewport = this.editor.viewportManager.getViewport();\n    const stepInScene = getStepByZoom(zoom);\n    const startX = setting.get('rulerWidth');\n    let startXInScene = viewport.x + startX / zoom;\n    startXInScene = getClosestTimesVal(startXInScene, stepInScene);\n    const endX = viewport.width;\n    let {\n      x: endXInScene\n    } = this.editor.viewportCoordsToScene(endX, 0);\n    endXInScene = getClosestTimesVal(endXInScene, stepInScene);\n    ctx.textAlign = 'center';\n    const y = setting.get('rulerWidth') - setting.get('rulerMarkSize');\n    while (startXInScene <= endXInScene) {\n      ctx.strokeStyle = setting.get('rulerMarkStroke');\n      ctx.fillStyle = setting.get('rulerMarkStroke');\n      const x = nearestPixelVal((startXInScene - viewport.x) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x, y + setting.get('rulerMarkSize'));\n      ctx.stroke();\n      ctx.closePath();\n      ctx.fillText(String(startXInScene), x, y - 4);\n      startXInScene += stepInScene;\n    }\n  }\n  drawYRuler() {\n    // 绘制刻度线和刻度值\n    const setting = this.editor.setting;\n    const ctx = this.editor.ctx;\n    const zoom = this.editor.zoomManager.getZoom();\n    const viewport = this.editor.viewportManager.getViewport();\n    const stepInScene = getStepByZoom(zoom);\n    const startY = setting.get('rulerWidth');\n    let startYInScene = viewport.y + startY / zoom;\n    startYInScene = getClosestTimesVal(startYInScene, stepInScene);\n    const endY = viewport.height;\n    let endYInScene = viewport.y + endY / zoom;\n    endYInScene = getClosestTimesVal(endYInScene, stepInScene);\n    const x = setting.get('rulerWidth') - setting.get('rulerMarkSize');\n    ctx.textAlign = 'center';\n    while (startYInScene <= endYInScene) {\n      ctx.fillStyle = setting.get('rulerMarkStroke');\n      const y = nearestPixelVal((startYInScene - viewport.y) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + setting.get('rulerMarkSize'), y);\n      ctx.stroke();\n      ctx.closePath();\n      rotateInCanvas(ctx, -HALF_PI, x, y);\n      ctx.fillText(String(startYInScene), x, y - 3);\n      rotateInCanvas(ctx, HALF_PI, x, y);\n      startYInScene += stepInScene;\n    }\n  }\n}\nexport default Ruler;","map":{"version":3,"names":["HALF_PI","rotateInCanvas","getClosestTimesVal","nearestPixelVal","getStepByZoom","zoom","steps","step","i","len","length","Ruler","constructor","editor","visible","open","close","draw","setting","ctx","viewport","viewportManager","getViewport","width","viewportWidth","height","viewportHeight","save","fillStyle","get","fillRect","drawXRuler","drawYRuler","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","restore","zoomManager","getZoom","stepInScene","startX","startXInScene","x","endX","endXInScene","viewportCoordsToScene","textAlign","y","fillText","String","startY","startYInScene","endY","endYInScene"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/ruler.ts"],"sourcesContent":["import { HALF_PI } from '../constant';\nimport { rotateInCanvas } from '../utils/canvas';\nimport { getClosestTimesVal, nearestPixelVal } from '../utils/common';\nimport { Editor } from './editor';\n\nconst getStepByZoom = (zoom: number) => {\n  /**\n   * 步长研究，参考 figma\n   * 1\n   * 2\n   * 5\n   * 10（对应 500% 往上） 找到规律了： 50 / zoom = 步长\n   * 25（对应 200% 往上）\n   * 50（对应 100% 往上）\n   * 100（对应 50% 往上）\n   * 250\n   * 500\n   * 1000\n   * 2500\n   * 5000\n   */\n  const steps = [1, 2, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000];\n  const step = 50 / zoom;\n  for (let i = 0, len = steps.length; i < len; i++) {\n    if (steps[i] >= step) return steps[i];\n  }\n  return steps[0];\n};\n\nclass Ruler {\n  visible = false;\n\n  constructor(private editor: Editor) {}\n\n  open() {\n    this.visible = true;\n  }\n  close() {\n    this.visible = false;\n  }\n  draw() {\n    const setting = this.editor.setting;\n    const ctx = this.editor.ctx;\n    const viewport = this.editor.viewportManager.getViewport();\n    const { width: viewportWidth, height: viewportHeight } = viewport;\n    ctx.save();\n    // 绘制背景\n    ctx.fillStyle = setting.get('rulerBgColor');\n    ctx.fillRect(0, 0, viewportWidth, setting.get('rulerWidth'));\n    ctx.fillRect(0, 0, setting.get('rulerWidth'), viewportHeight);\n\n    this.drawXRuler();\n    this.drawYRuler();\n\n    // 把左上角的小矩形上的刻度盖掉\n    ctx.fillStyle = setting.get('rulerBgColor');\n    ctx.fillRect(0, 0, setting.get('rulerWidth'), setting.get('rulerWidth'));\n\n    // 绘制 border\n    ctx.strokeStyle = setting.get('rulerStroke');\n    ctx.beginPath();\n    // 水平 border\n    ctx.moveTo(0, setting.get('rulerWidth') + 0.5);\n    ctx.lineTo(viewportWidth, setting.get('rulerWidth') + 0.5);\n    ctx.stroke();\n    ctx.closePath();\n    // 垂直 border\n    ctx.beginPath();\n    ctx.moveTo(setting.get('rulerWidth') + 0.5, 0);\n    ctx.lineTo(setting.get('rulerWidth') + 0.5, viewportHeight);\n    ctx.stroke();\n    ctx.closePath();\n\n    ctx.restore();\n  }\n  private drawXRuler() {\n    // 绘制刻度线和刻度值\n    // 计算 x 轴起点和终点范围\n    const setting = this.editor.setting;\n    const ctx = this.editor.ctx;\n    const zoom = this.editor.zoomManager.getZoom();\n    const viewport = this.editor.viewportManager.getViewport();\n    const stepInScene = getStepByZoom(zoom);\n\n    const startX = setting.get('rulerWidth');\n    let startXInScene = viewport.x + startX / zoom;\n    startXInScene = getClosestTimesVal(startXInScene, stepInScene);\n\n    const endX = viewport.width;\n    let { x: endXInScene } = this.editor.viewportCoordsToScene(endX, 0);\n    endXInScene = getClosestTimesVal(endXInScene, stepInScene);\n\n    ctx.textAlign = 'center';\n    const y = setting.get('rulerWidth') - setting.get('rulerMarkSize');\n    while (startXInScene <= endXInScene) {\n      ctx.strokeStyle = setting.get('rulerMarkStroke');\n      ctx.fillStyle = setting.get('rulerMarkStroke');\n      const x = nearestPixelVal((startXInScene - viewport.x) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x, y + setting.get('rulerMarkSize'));\n      ctx.stroke();\n      ctx.closePath();\n      ctx.fillText(String(startXInScene), x, y - 4);\n      startXInScene += stepInScene;\n    }\n  }\n  private drawYRuler() {\n    // 绘制刻度线和刻度值\n    const setting = this.editor.setting;\n    const ctx = this.editor.ctx;\n    const zoom = this.editor.zoomManager.getZoom();\n    const viewport = this.editor.viewportManager.getViewport();\n    const stepInScene = getStepByZoom(zoom);\n\n    const startY = setting.get('rulerWidth');\n    let startYInScene = viewport.y + startY / zoom;\n    startYInScene = getClosestTimesVal(startYInScene, stepInScene);\n\n    const endY = viewport.height;\n    let endYInScene = viewport.y + endY / zoom;\n    endYInScene = getClosestTimesVal(endYInScene, stepInScene);\n\n    const x = setting.get('rulerWidth') - setting.get('rulerMarkSize');\n    ctx.textAlign = 'center';\n    while (startYInScene <= endYInScene) {\n      ctx.fillStyle = setting.get('rulerMarkStroke');\n      const y = nearestPixelVal((startYInScene - viewport.y) * zoom);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + setting.get('rulerMarkSize'), y);\n      ctx.stroke();\n      ctx.closePath();\n      rotateInCanvas(ctx, -HALF_PI, x, y);\n      ctx.fillText(String(startYInScene), x, y - 3);\n      rotateInCanvas(ctx, HALF_PI, x, y);\n      startYInScene += stepInScene;\n    }\n  }\n}\n\nexport default Ruler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}