{"ast":null,"code":"import throttle from 'lodash.throttle';\nimport { DrawSelectionBox } from './tool_select_selection';\nimport { SelectMoveTool } from './tool_select_move';\nimport { SelectRotationTool } from './tool_select_rotation';\nimport { SelectScaleTool } from './tool_select_scale';\nexport class SelectTool {\n  // 发生过拖拽\n\n  constructor(editor) {\n    this.editor = editor;\n    this.type = 'select';\n    this.hotkey = 'v';\n    this.startPoint = {\n      x: -1,\n      y: -1\n    };\n    this.drawingRect = null;\n    this.currStrategy = null;\n    // 策略\n    this.strategyMove = void 0;\n    this.strategyDrawSelectionBox = void 0;\n    this.strategySelectRotation = void 0;\n    this.strategySelectScale = void 0;\n    // 鼠标按下时选中的元素，在鼠标释放时可能会用到。shift 取消一个元素时需要使用\n    this.topHitElementWhenStart = null;\n    this.isDragHappened = false;\n    this.moveExcludeDrag = throttle(e => {\n      if (this.editor.hostEventManager.isSpacePressing) {\n        return;\n      }\n      const pointer = this.editor.getSceneCursorXY(e);\n      const transformHandleName = this.editor.sceneGraph.transformHandle.getNameByPoint(pointer);\n      let cursor = '';\n      if (transformHandleName === 'rotation') {\n        cursor = 'grab';\n      } else if (transformHandleName === 'se') {\n        cursor = 'nwse-resize';\n      }\n      this.editor.setCursor(cursor);\n    }, 50);\n    this.strategyMove = new SelectMoveTool(editor);\n    this.strategyDrawSelectionBox = new DrawSelectionBox(editor);\n    this.strategySelectRotation = new SelectRotationTool(editor);\n    this.strategySelectScale = new SelectScaleTool(editor);\n  }\n  active() {\n    this.editor.setCursor('');\n  }\n  inactive() {\n    this.editor.setCursor('');\n    this.editor.selectedElements.clear();\n    this.editor.sceneGraph.render();\n  }\n  start(e) {\n    this.currStrategy = null;\n    this.topHitElementWhenStart = null;\n    this.isDragHappened = false;\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    // 有几种情况\n    // 1. 直接选中一个元素\n    // 2. 没选中，拖拽，产生选区\n    // 3. 选中缩放或旋转控制点\n    // 4. 选中 选中框 内部\n    // 5. 按住 shift 键，可进行连选\n\n    const sceneGraph = this.editor.sceneGraph;\n    const selectedElements = this.editor.selectedElements;\n    const isShiftPressing = this.editor.hostEventManager.isShiftPressing;\n    this.startPoint = this.editor.getSceneCursorXY(e);\n\n    // 0. 点中 handle（旋转点）\n    const handleName = sceneGraph.transformHandle.getNameByPoint(this.startPoint);\n    // if (handleName) {\n    if (handleName === 'rotation') {\n      this.currStrategy = this.strategySelectRotation;\n    }\n    // TODO: now only support se scale handle\n    else if (handleName === 'se') {\n      this.currStrategy = this.strategySelectScale;\n    }\n    // }\n\n    // 1. 点击落在选中盒中\n    else if (!isShiftPressing && sceneGraph.isPointInSelectedBox(this.startPoint)) {\n      this.currStrategy = this.strategyMove;\n    } else {\n      const topHitElement = sceneGraph.getTopHitElement(this.startPoint.x, this.startPoint.y);\n      // 2. 点中一个元素 （FIXME: 没考虑描边的情况）\n      if (topHitElement) {\n        // 按住 shift 键的选中，添加或移除一个选中元素\n        if (isShiftPressing) {\n          // 延迟到鼠标释放时才将元素从选中元素中移出\n          if (selectedElements.getItems().includes(topHitElement)) {\n            this.topHitElementWhenStart = topHitElement;\n          } else {\n            selectedElements.toggleItems([topHitElement]);\n          }\n        } else {\n          selectedElements.setItems([topHitElement]);\n        }\n        sceneGraph.render();\n        this.currStrategy = this.strategyMove;\n      } else {\n        // 3. 点击到空白区域\n        this.currStrategy = this.strategyDrawSelectionBox;\n      }\n    }\n    if (this.currStrategy) {\n      this.currStrategy.active();\n      this.currStrategy.start(e);\n    } else {\n      throw new Error('没有根据判断选择策略，代码有问题');\n    }\n  }\n  drag(e) {\n    this.isDragHappened = true;\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    if (this.currStrategy) {\n      this.currStrategy.drag(e);\n    } else {\n      throw new Error('没有根据判断选择策略，代码有问题');\n    }\n  }\n  end(e, isEnableDrag) {\n    const currStrategy = this.currStrategy;\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    if (this.topHitElementWhenStart && !this.isDragHappened) {\n      this.editor.selectedElements.toggleItems([this.topHitElementWhenStart]);\n      this.editor.sceneGraph.render();\n    }\n    if (currStrategy) {\n      currStrategy.end(e, isEnableDrag);\n      currStrategy.inactive();\n    } else {\n      throw new Error('没有根据判断选择策略，代码有问题');\n    }\n  }\n  afterEnd() {\n    var _this$currStrategy;\n    if (!this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      this.editor.setCursor('');\n    }\n    this.topHitElementWhenStart = null;\n    this.isDragHappened = false;\n    (_this$currStrategy = this.currStrategy) === null || _this$currStrategy === void 0 ? void 0 : _this$currStrategy.afterEnd();\n    this.currStrategy = null;\n  }\n}\nSelectTool.type = 'select';","map":{"version":3,"names":["throttle","DrawSelectionBox","SelectMoveTool","SelectRotationTool","SelectScaleTool","SelectTool","constructor","editor","type","hotkey","startPoint","x","y","drawingRect","currStrategy","strategyMove","strategyDrawSelectionBox","strategySelectRotation","strategySelectScale","topHitElementWhenStart","isDragHappened","moveExcludeDrag","e","hostEventManager","isSpacePressing","pointer","getSceneCursorXY","transformHandleName","sceneGraph","transformHandle","getNameByPoint","cursor","setCursor","active","inactive","selectedElements","clear","render","start","isDraggingCanvasBySpace","isShiftPressing","handleName","isPointInSelectedBox","topHitElement","getTopHitElement","getItems","includes","toggleItems","setItems","Error","drag","end","isEnableDrag","afterEnd","_this$currStrategy"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/tools/tool_select/tool_select.ts"],"sourcesContent":["import throttle from 'lodash.throttle';\nimport { Graph } from '../../scene/graph';\nimport { Rect } from '../../scene/rect';\nimport { IPoint } from '../../../type';\nimport { Editor } from '../../editor';\nimport { IBaseTool, ITool } from '../type';\nimport { DrawSelectionBox } from './tool_select_selection';\nimport { SelectMoveTool } from './tool_select_move';\nimport { SelectRotationTool } from './tool_select_rotation';\nimport { SelectScaleTool } from './tool_select_scale';\n\nexport class SelectTool implements ITool {\n  static type = 'select';\n  type = 'select';\n  hotkey = 'v';\n\n  startPoint: IPoint = { x: -1, y: -1 };\n  drawingRect: Rect | null = null;\n  currStrategy: IBaseTool | null = null;\n  // 策略\n  strategyMove: SelectMoveTool;\n  strategyDrawSelectionBox: DrawSelectionBox;\n  strategySelectRotation: SelectRotationTool;\n  strategySelectScale: SelectScaleTool;\n\n  // 鼠标按下时选中的元素，在鼠标释放时可能会用到。shift 取消一个元素时需要使用\n  topHitElementWhenStart: Graph | null = null;\n  isDragHappened = false; // 发生过拖拽\n\n  constructor(private editor: Editor) {\n    this.strategyMove = new SelectMoveTool(editor);\n    this.strategyDrawSelectionBox = new DrawSelectionBox(editor);\n    this.strategySelectRotation = new SelectRotationTool(editor);\n    this.strategySelectScale = new SelectScaleTool(editor);\n  }\n  active() {\n    this.editor.setCursor('');\n  }\n  inactive() {\n    this.editor.setCursor('');\n\n    this.editor.selectedElements.clear();\n    this.editor.sceneGraph.render();\n  }\n  moveExcludeDrag = throttle((e: PointerEvent) => {\n    if (this.editor.hostEventManager.isSpacePressing) {\n      return;\n    }\n    const pointer = this.editor.getSceneCursorXY(e);\n    const transformHandleName =\n      this.editor.sceneGraph.transformHandle.getNameByPoint(pointer);\n\n    let cursor = '';\n    if (transformHandleName === 'rotation') {\n      cursor = 'grab';\n    } else if (transformHandleName === 'se') {\n      cursor = 'nwse-resize';\n    }\n    this.editor.setCursor(cursor);\n  }, 50);\n  start(e: PointerEvent) {\n    this.currStrategy = null;\n    this.topHitElementWhenStart = null;\n    this.isDragHappened = false;\n\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    // 有几种情况\n    // 1. 直接选中一个元素\n    // 2. 没选中，拖拽，产生选区\n    // 3. 选中缩放或旋转控制点\n    // 4. 选中 选中框 内部\n    // 5. 按住 shift 键，可进行连选\n\n    const sceneGraph = this.editor.sceneGraph;\n    const selectedElements = this.editor.selectedElements;\n    const isShiftPressing = this.editor.hostEventManager.isShiftPressing;\n\n    this.startPoint = this.editor.getSceneCursorXY(e);\n\n    // 0. 点中 handle（旋转点）\n    const handleName = sceneGraph.transformHandle.getNameByPoint(\n      this.startPoint,\n    );\n    // if (handleName) {\n    if (handleName === 'rotation') {\n      this.currStrategy = this.strategySelectRotation;\n    }\n    // TODO: now only support se scale handle\n    else if (handleName === 'se') {\n      this.currStrategy = this.strategySelectScale;\n    }\n    // }\n\n    // 1. 点击落在选中盒中\n    else if (\n      !isShiftPressing &&\n      sceneGraph.isPointInSelectedBox(this.startPoint)\n    ) {\n      this.currStrategy = this.strategyMove;\n    } else {\n      const topHitElement = sceneGraph.getTopHitElement(\n        this.startPoint.x,\n        this.startPoint.y,\n      );\n      // 2. 点中一个元素 （FIXME: 没考虑描边的情况）\n      if (topHitElement) {\n        // 按住 shift 键的选中，添加或移除一个选中元素\n        if (isShiftPressing) {\n          // 延迟到鼠标释放时才将元素从选中元素中移出\n          if (selectedElements.getItems().includes(topHitElement)) {\n            this.topHitElementWhenStart = topHitElement;\n          } else {\n            selectedElements.toggleItems([topHitElement]);\n          }\n        } else {\n          selectedElements.setItems([topHitElement]);\n        }\n\n        sceneGraph.render();\n        this.currStrategy = this.strategyMove;\n      } else {\n        // 3. 点击到空白区域\n        this.currStrategy = this.strategyDrawSelectionBox;\n      }\n    }\n\n    if (this.currStrategy) {\n      this.currStrategy.active();\n      this.currStrategy.start(e);\n    } else {\n      throw new Error('没有根据判断选择策略，代码有问题');\n    }\n  }\n  drag(e: PointerEvent) {\n    this.isDragHappened = true;\n\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n\n    if (this.currStrategy) {\n      this.currStrategy.drag(e);\n    } else {\n      throw new Error('没有根据判断选择策略，代码有问题');\n    }\n  }\n  end(e: PointerEvent, isEnableDrag: boolean) {\n    const currStrategy = this.currStrategy;\n\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n\n    if (this.topHitElementWhenStart && !this.isDragHappened) {\n      this.editor.selectedElements.toggleItems([this.topHitElementWhenStart]);\n      this.editor.sceneGraph.render();\n    }\n\n    if (currStrategy) {\n      currStrategy.end(e, isEnableDrag);\n      currStrategy.inactive();\n    } else {\n      throw new Error('没有根据判断选择策略，代码有问题');\n    }\n  }\n  afterEnd() {\n    if (!this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      this.editor.setCursor('');\n    }\n    this.topHitElementWhenStart = null;\n    this.isDragHappened = false;\n    this.currStrategy?.afterEnd();\n    this.currStrategy = null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}