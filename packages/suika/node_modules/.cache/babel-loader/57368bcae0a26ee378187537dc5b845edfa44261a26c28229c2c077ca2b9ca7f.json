{"ast":null,"code":"import { noop } from '../../utils/common';\nimport { normalizeRect } from '../../utils/graphics';\nimport { AddShapeCommand } from '../commands/add_shape';\nexport class DrawGraphTool {\n  constructor(editor) {\n    this.editor = editor;\n    this.type = 'drawGraph';\n    this.commandDesc = 'Add Graph';\n    this.hotkey = '';\n    this.drawingGraph = null;\n    this.startPoint = {\n      x: -1,\n      y: -1\n    };\n    this.lastDragPoint = void 0;\n    this.lastDragPointInViewport = void 0;\n    this.isDragging = false;\n    this.unbindEvent = noop;\n  }\n  active() {\n    const editor = this.editor;\n    editor.setCursor('crosshair');\n    const hotkeysManager = editor.hostEventManager;\n    const updateRectWhenShiftToggle = () => {\n      if (this.isDragging) {\n        this.updateRect();\n      }\n    };\n    hotkeysManager.on('shiftToggle', updateRectWhenShiftToggle);\n    const updateRectWhenViewportTranslate = () => {\n      if (editor.hostEventManager.isDraggingCanvasBySpace) {\n        return;\n      }\n      if (this.isDragging) {\n        this.lastDragPoint = editor.viewportCoordsToScene(this.lastDragPointInViewport.x, this.lastDragPointInViewport.y, this.editor.setting.get('snapToPixelGrid'));\n        this.updateRect();\n      }\n    };\n    editor.viewportManager.on('xOrYChange', updateRectWhenViewportTranslate);\n    this.unbindEvent = () => {\n      hotkeysManager.off('shiftToggle', updateRectWhenShiftToggle);\n      editor.viewportManager.off('xOrYChange', updateRectWhenViewportTranslate);\n    };\n  }\n  inactive() {\n    this.editor.setCursor('');\n    this.unbindEvent();\n  }\n  moveExcludeDrag() {\n    // do nothing;\n  }\n  start(e) {\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    this.startPoint = this.editor.getSceneCursorXY(e, this.editor.setting.get('snapToPixelGrid'));\n    this.drawingGraph = null;\n    this.isDragging = false;\n  }\n  drag(e) {\n    this.editor.hostEventManager.disableDelete();\n    this.editor.hostEventManager.disableContextmenu();\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    this.isDragging = true;\n    this.lastDragPointInViewport = this.editor.getCursorXY(e);\n    this.lastDragPoint = this.editor.getSceneCursorXY(e, this.editor.setting.get('snapToPixelGrid'));\n    this.updateRect();\n  }\n  /**\n   * create graph, and give the original rect (width may be negative)\n   * noMove: if true, the graph will not move when drag\n   */\n\n  adjustSizeWhenShiftPressing(rect) {\n    // pressing Shift to draw a square\n    const {\n      width,\n      height\n    } = rect;\n    const size = Math.max(Math.abs(width), Math.abs(height));\n    rect.height = (Math.sign(height) || 1) * size;\n    rect.width = (Math.sign(width) || 1) * size;\n  }\n\n  /**\n   * update graph, and give the original rect (width may be negative)\n   */\n  updateGraph(rect) {\n    rect = normalizeRect(rect);\n    const drawingShape = this.drawingGraph;\n    drawingShape.x = rect.x;\n    drawingShape.y = rect.y;\n    drawingShape.width = rect.width;\n    drawingShape.height = rect.height;\n  }\n  updateRect() {\n    const {\n      x,\n      y\n    } = this.lastDragPoint;\n    const sceneGraph = this.editor.sceneGraph;\n    const {\n      x: startX,\n      y: startY\n    } = this.startPoint;\n    const width = x - startX;\n    const height = y - startY;\n    const rect = {\n      x: startX,\n      y: startY,\n      width,\n      // width may be negative\n      height // height may be negative\n    };\n\n    // pressing Shift to draw a square\n    if (this.editor.hostEventManager.isShiftPressing) {\n      this.adjustSizeWhenShiftPressing(rect);\n    }\n    if (this.drawingGraph) {\n      this.updateGraph(rect);\n    } else {\n      const element = this.createGraph(rect);\n      sceneGraph.addItems([element]);\n      this.drawingGraph = element;\n    }\n    this.editor.selectedElements.setItems([this.drawingGraph]);\n    sceneGraph.render();\n  }\n  end(e) {\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    const endPoint = this.editor.getSceneCursorXY(e, this.editor.setting.get('snapToPixelGrid'));\n    if (this.drawingGraph === null) {\n      const {\n        x: cx,\n        y: cy\n      } = endPoint;\n      const width = this.editor.setting.get('drawGraphDefaultWidth');\n      const height = this.editor.setting.get('drawGraphDefaultHeight');\n      this.drawingGraph = this.createGraph({\n        x: cx - width / 2,\n        y: cy - height / 2,\n        width,\n        height\n      }, true);\n      if (this.drawingGraph) {\n        this.editor.sceneGraph.addItems([this.drawingGraph]);\n        this.editor.selectedElements.setItems([this.drawingGraph]);\n        this.editor.sceneGraph.render();\n      }\n    }\n    if (this.drawingGraph) {\n      this.editor.commandManager.pushCommand(new AddShapeCommand(this.commandDesc, this.editor, [this.drawingGraph]));\n    }\n  }\n  afterEnd() {\n    this.isDragging = false;\n    this.editor.hostEventManager.enableDelete();\n    this.editor.hostEventManager.enableContextmenu();\n    if (this.drawingGraph) {\n      this.editor.toolManager.setActiveTool('select');\n    }\n  }\n}\nDrawGraphTool.type = 'drawGraph';","map":{"version":3,"names":["noop","normalizeRect","AddShapeCommand","DrawGraphTool","constructor","editor","type","commandDesc","hotkey","drawingGraph","startPoint","x","y","lastDragPoint","lastDragPointInViewport","isDragging","unbindEvent","active","setCursor","hotkeysManager","hostEventManager","updateRectWhenShiftToggle","updateRect","on","updateRectWhenViewportTranslate","isDraggingCanvasBySpace","viewportCoordsToScene","setting","get","viewportManager","off","inactive","moveExcludeDrag","start","e","getSceneCursorXY","drag","disableDelete","disableContextmenu","getCursorXY","adjustSizeWhenShiftPressing","rect","width","height","size","Math","max","abs","sign","updateGraph","drawingShape","sceneGraph","startX","startY","isShiftPressing","element","createGraph","addItems","selectedElements","setItems","render","end","endPoint","cx","cy","commandManager","pushCommand","afterEnd","enableDelete","enableContextmenu","toolManager","setActiveTool"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/tools/tool_draw_graph.ts"],"sourcesContent":["import { Graph } from '../scene/graph';\nimport { IPoint, IRect } from '../../type';\nimport { noop } from '../../utils/common';\nimport { normalizeRect } from '../../utils/graphics';\nimport { AddShapeCommand } from '../commands/add_shape';\nimport { Editor } from '../editor';\nimport { ITool } from './type';\n\nexport abstract class DrawGraphTool implements ITool {\n  static type = 'drawGraph';\n  type = 'drawGraph';\n  commandDesc = 'Add Graph';\n  hotkey = '';\n\n  protected drawingGraph: Graph | null = null;\n\n  private startPoint: IPoint = { x: -1, y: -1 };\n  private lastDragPoint!: IPoint;\n  private lastDragPointInViewport!: IPoint;\n\n  private isDragging = false;\n  private unbindEvent: () => void = noop;\n\n  constructor(protected editor: Editor) {}\n  active() {\n    const editor = this.editor;\n    editor.setCursor('crosshair');\n\n    const hotkeysManager = editor.hostEventManager;\n    const updateRectWhenShiftToggle = () => {\n      if (this.isDragging) {\n        this.updateRect();\n      }\n    };\n    hotkeysManager.on('shiftToggle', updateRectWhenShiftToggle);\n\n    const updateRectWhenViewportTranslate = () => {\n      if (editor.hostEventManager.isDraggingCanvasBySpace) {\n        return;\n      }\n      if (this.isDragging) {\n        this.lastDragPoint = editor.viewportCoordsToScene(\n          this.lastDragPointInViewport.x,\n          this.lastDragPointInViewport.y,\n          this.editor.setting.get('snapToPixelGrid'),\n        );\n        this.updateRect();\n      }\n    };\n    editor.viewportManager.on('xOrYChange', updateRectWhenViewportTranslate);\n\n    this.unbindEvent = () => {\n      hotkeysManager.off('shiftToggle', updateRectWhenShiftToggle);\n      editor.viewportManager.off('xOrYChange', updateRectWhenViewportTranslate);\n    };\n  }\n  inactive() {\n    this.editor.setCursor('');\n\n    this.unbindEvent();\n  }\n  moveExcludeDrag() {\n    // do nothing;\n  }\n\n  start(e: PointerEvent) {\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    this.startPoint = this.editor.getSceneCursorXY(\n      e,\n      this.editor.setting.get('snapToPixelGrid'),\n    );\n    this.drawingGraph = null;\n    this.isDragging = false;\n  }\n\n  drag(e: PointerEvent) {\n    this.editor.hostEventManager.disableDelete();\n    this.editor.hostEventManager.disableContextmenu();\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n    this.isDragging = true;\n    this.lastDragPointInViewport = this.editor.getCursorXY(e);\n    this.lastDragPoint = this.editor.getSceneCursorXY(\n      e,\n      this.editor.setting.get('snapToPixelGrid'),\n    );\n    this.updateRect();\n  }\n  /**\n   * create graph, and give the original rect (width may be negative)\n   * noMove: if true, the graph will not move when drag\n   */\n  protected abstract createGraph(rect: IRect, noMove?: boolean): Graph | null;\n\n  protected adjustSizeWhenShiftPressing(rect: IRect) {\n    // pressing Shift to draw a square\n    const { width, height } = rect;\n    const size = Math.max(Math.abs(width), Math.abs(height));\n    rect.height = (Math.sign(height) || 1) * size;\n    rect.width = (Math.sign(width) || 1) * size;\n  }\n\n  /**\n   * update graph, and give the original rect (width may be negative)\n   */\n  protected updateGraph(rect: IRect) {\n    rect = normalizeRect(rect);\n    const drawingShape = this.drawingGraph!;\n    drawingShape.x = rect.x;\n    drawingShape.y = rect.y;\n    drawingShape.width = rect.width;\n    drawingShape.height = rect.height;\n  }\n\n  private updateRect() {\n    const { x, y } = this.lastDragPoint;\n    const sceneGraph = this.editor.sceneGraph;\n    const { x: startX, y: startY } = this.startPoint;\n\n    const width = x - startX;\n    const height = y - startY;\n\n    const rect = {\n      x: startX,\n      y: startY,\n      width, // width may be negative\n      height, // height may be negative\n    };\n\n    // pressing Shift to draw a square\n    if (this.editor.hostEventManager.isShiftPressing) {\n      this.adjustSizeWhenShiftPressing(rect);\n    }\n\n    if (this.drawingGraph) {\n      this.updateGraph(rect);\n    } else {\n      const element = this.createGraph(rect)!;\n      sceneGraph.addItems([element]);\n\n      this.drawingGraph = element;\n    }\n    this.editor.selectedElements.setItems([this.drawingGraph]);\n    sceneGraph.render();\n  }\n\n  end(e: PointerEvent) {\n    if (this.editor.hostEventManager.isDraggingCanvasBySpace) {\n      return;\n    }\n\n    const endPoint = this.editor.getSceneCursorXY(\n      e,\n      this.editor.setting.get('snapToPixelGrid'),\n    );\n\n    if (this.drawingGraph === null) {\n      const { x: cx, y: cy } = endPoint;\n      const width = this.editor.setting.get('drawGraphDefaultWidth');\n      const height = this.editor.setting.get('drawGraphDefaultHeight');\n\n      this.drawingGraph = this.createGraph(\n        {\n          x: cx - width / 2,\n          y: cy - height / 2,\n          width,\n          height,\n        },\n        true,\n      );\n      if (this.drawingGraph) {\n        this.editor.sceneGraph.addItems([this.drawingGraph]);\n\n        this.editor.selectedElements.setItems([this.drawingGraph]);\n        this.editor.sceneGraph.render();\n      }\n    }\n\n    if (this.drawingGraph) {\n      this.editor.commandManager.pushCommand(\n        new AddShapeCommand(this.commandDesc, this.editor, [this.drawingGraph]),\n      );\n    }\n  }\n\n  afterEnd() {\n    this.isDragging = false;\n    this.editor.hostEventManager.enableDelete();\n    this.editor.hostEventManager.enableContextmenu();\n    if (this.drawingGraph) {\n      this.editor.toolManager.setActiveTool('select');\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}