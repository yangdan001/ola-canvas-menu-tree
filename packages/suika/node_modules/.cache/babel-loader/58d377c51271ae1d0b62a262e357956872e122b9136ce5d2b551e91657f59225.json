{"ast":null,"code":"var _jsxFileName = \"/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/Cards/TextureCard/TextureCard.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { parseHexToRGB, parseRGBAStr, parseRGBToHex } from '../../../utils/color';\nimport { BaseCard } from '../BaseCard';\nimport './TextureCard.scss';\nimport { DEFAULT_IMAGE_SRC, TextureType } from '../../../editor/texture';\nimport { TexturePicker } from '../../ColorPicker/TexturePicker';\nimport { IconButton, Popover } from '@suika/components';\nimport { ColorHexInput } from '../../input/ColorHexInput';\nimport { AddOutlined, RemoveOutlined } from '@suika/icons';\nimport { arrMapRevert } from '../../../utils/array_util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isNearWhite = (rgba, threshold = 85) => {\n  const {\n    r,\n    g,\n    b\n  } = rgba;\n  const dist = Math.sqrt(Math.pow(r - 255, 2) + Math.pow(g - 255, 2) + Math.pow(b - 255, 2));\n  return dist < threshold;\n};\nexport const TextureCard = ({\n  title,\n  textures,\n  onChange,\n  onChangeComplete,\n  onDelete,\n  onAdd,\n  appendedContent\n}) => {\n  _s();\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const pickerPopover = /*#__PURE__*/_jsxDEV(TexturePicker, {\n    texture: textures[activeIndex],\n    onClose: () => {\n      setActiveIndex(-1);\n    },\n    onChange: tex => onChange(tex, activeIndex),\n    onChangeComplete: tex => onChangeComplete(tex, activeIndex)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n  if (textures.length == 0) {\n    return /*#__PURE__*/_jsxDEV(BaseCard, {\n      title: title,\n      headerAction: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => {\n          onAdd();\n        },\n        children: /*#__PURE__*/_jsxDEV(AddOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Popover, {\n    open: activeIndex >= 0,\n    onOpenChange: val => {\n      if (!val) {\n        setActiveIndex(-1);\n      }\n    },\n    content: activeIndex >= 0 && pickerPopover,\n    placement: \"left-start\",\n    offset: 2,\n    children: /*#__PURE__*/_jsxDEV(BaseCard, {\n      title: title,\n      headerAction: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: onAdd,\n        children: /*#__PURE__*/_jsxDEV(AddOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this),\n      children: [arrMapRevert(textures, (texture, index) => {\n        /** SOLID **/\n        if (texture.type === TextureType.Solid) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fill-item\",\n            children: [/*#__PURE__*/_jsxDEV(ColorHexInput, {\n              prefix: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"color-block\",\n                style: {\n                  backgroundColor: parseRGBAStr(texture.attrs),\n                  boxShadow: isNearWhite(texture.attrs) ? '0 0 0 1px rgba(0,0,0,0.1) inset' : undefined\n                },\n                onMouseDown: () => {\n                  setActiveIndex(index);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 21\n              }, this),\n              value: parseRGBToHex(texture.attrs),\n              onBlur: newHex => {\n                const rgb = parseHexToRGB(newHex);\n                if (rgb) {\n                  const newSolidTexture = {\n                    type: TextureType.Solid,\n                    attrs: {\n                      ...rgb,\n                      a: texture.attrs.a\n                    }\n                  };\n                  console.log('newHex', newHex, newSolidTexture);\n                  onChangeComplete(newSolidTexture, index);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => onDelete(index),\n              children: /*#__PURE__*/_jsxDEV(RemoveOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this);\n        }\n\n        /** IMAGE */\n        if (texture.type === TextureType.Image) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fill-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"img-block\",\n              onClick: () => {\n                setActiveIndex(index);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                style: {\n                  backgroundImage: `url(${texture.attrs.src})`,\n                  objectFit: 'contain',\n                  width: '100%',\n                  height: '100%'\n                },\n                alt: \"img\",\n                src: texture.attrs.src || DEFAULT_IMAGE_SRC\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => onDelete(index),\n              children: /*#__PURE__*/_jsxDEV(RemoveOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this);\n        }\n      }), appendedContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(TextureCard, \"TN1Glg/gLBq1bEQVqZ+vtJ4rI70=\");\n_c = TextureCard;\nvar _c;\n$RefreshReg$(_c, \"TextureCard\");","map":{"version":3,"names":["useState","parseHexToRGB","parseRGBAStr","parseRGBToHex","BaseCard","DEFAULT_IMAGE_SRC","TextureType","TexturePicker","IconButton","Popover","ColorHexInput","AddOutlined","RemoveOutlined","arrMapRevert","jsxDEV","_jsxDEV","isNearWhite","rgba","threshold","r","g","b","dist","Math","sqrt","pow","TextureCard","title","textures","onChange","onChangeComplete","onDelete","onAdd","appendedContent","_s","activeIndex","setActiveIndex","pickerPopover","texture","onClose","tex","fileName","_jsxFileName","lineNumber","columnNumber","length","headerAction","onClick","children","open","onOpenChange","val","content","placement","offset","index","type","Solid","className","prefix","style","backgroundColor","attrs","boxShadow","undefined","onMouseDown","value","onBlur","newHex","rgb","newSolidTexture","a","console","log","Image","backgroundImage","src","objectFit","width","height","alt","_c","$RefreshReg$"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/Cards/TextureCard/TextureCard.tsx"],"sourcesContent":["import { FC, useState } from 'react';\nimport {\n  parseHexToRGB,\n  parseRGBAStr,\n  parseRGBToHex,\n} from '../../../utils/color';\nimport { BaseCard } from '../BaseCard';\nimport './TextureCard.scss';\nimport {\n  DEFAULT_IMAGE_SRC,\n  IRGBA,\n  ITexture,\n  TextureSolid,\n  TextureType,\n} from '../../../editor/texture';\nimport { TexturePicker } from '../../ColorPicker/TexturePicker';\nimport { IconButton, Popover } from '@suika/components';\nimport { ColorHexInput } from '../../input/ColorHexInput';\nimport { AddOutlined, RemoveOutlined } from '@suika/icons';\nimport { arrMapRevert } from '../../../utils/array_util';\n\nconst isNearWhite = (rgba: IRGBA, threshold = 85) => {\n  const { r, g, b } = rgba;\n\n  const dist = Math.sqrt(\n    Math.pow(r - 255, 2) + Math.pow(g - 255, 2) + Math.pow(b - 255, 2),\n  );\n  return dist < threshold;\n};\n\ninterface IProps {\n  title: string;\n  textures: ITexture[];\n  onChange: (fill: ITexture, index: number) => void;\n  onChangeComplete: (fill: ITexture, index: number) => void;\n\n  onDelete: (index: number) => void;\n  onAdd: () => void;\n\n  appendedContent?: React.ReactNode;\n}\n\nexport const TextureCard: FC<IProps> = ({\n  title,\n  textures,\n  onChange,\n  onChangeComplete,\n\n  onDelete,\n  onAdd,\n\n  appendedContent,\n}) => {\n  const [activeIndex, setActiveIndex] = useState(-1);\n\n  const pickerPopover = (\n    <TexturePicker\n      texture={textures[activeIndex]}\n      onClose={() => {\n        setActiveIndex(-1);\n      }}\n      onChange={(tex) => onChange(tex, activeIndex)}\n      onChangeComplete={(tex) => onChangeComplete(tex, activeIndex)}\n    />\n  );\n\n  if (textures.length == 0) {\n    return (\n      <BaseCard\n        title={title}\n        headerAction={\n          <IconButton\n            onClick={() => {\n              onAdd();\n            }}\n          >\n            <AddOutlined />\n          </IconButton>\n        }\n      >\n        {/* TODO: different types with empty and different types with filled */}\n        {/* <div style={{ marginLeft: 16 }}>\n          <FormattedMessage id=\"mixed\" />\n        </div> */}\n      </BaseCard>\n    );\n  }\n\n  return (\n    <Popover\n      open={activeIndex >= 0}\n      onOpenChange={(val) => {\n        if (!val) {\n          setActiveIndex(-1);\n        }\n      }}\n      content={activeIndex >= 0 && pickerPopover}\n      placement=\"left-start\"\n      offset={2}\n    >\n      <BaseCard\n        title={title}\n        headerAction={\n          <IconButton onClick={onAdd}>\n            <AddOutlined />\n          </IconButton>\n        }\n      >\n        {arrMapRevert(textures, (texture, index) => {\n          /** SOLID **/\n          if (texture.type === TextureType.Solid) {\n            return (\n              <div className=\"fill-item\" key={index}>\n                <ColorHexInput\n                  prefix={\n                    <div\n                      className=\"color-block\"\n                      style={{\n                        backgroundColor: parseRGBAStr(texture.attrs),\n                        boxShadow: isNearWhite(texture.attrs)\n                          ? '0 0 0 1px rgba(0,0,0,0.1) inset'\n                          : undefined,\n                      }}\n                      onMouseDown={() => {\n                        setActiveIndex(index);\n                      }}\n                    />\n                  }\n                  value={parseRGBToHex(texture.attrs)}\n                  onBlur={(newHex) => {\n                    const rgb = parseHexToRGB(newHex);\n\n                    if (rgb) {\n                      const newSolidTexture: TextureSolid = {\n                        type: TextureType.Solid,\n                        attrs: {\n                          ...rgb,\n                          a: texture.attrs.a,\n                        },\n                      };\n                      console.log('newHex', newHex, newSolidTexture);\n                      onChangeComplete(newSolidTexture, index);\n                    }\n                  }}\n                />\n                <IconButton onClick={() => onDelete(index)}>\n                  <RemoveOutlined />\n                </IconButton>\n              </div>\n            );\n          }\n\n          /** IMAGE */\n          if (texture.type === TextureType.Image) {\n            return (\n              <div className=\"fill-item\" key={index}>\n                <div\n                  className=\"img-block\"\n                  onClick={() => {\n                    setActiveIndex(index);\n                  }}\n                >\n                  <img\n                    style={{\n                      backgroundImage: `url(${texture.attrs.src})`,\n                      objectFit: 'contain',\n                      width: '100%',\n                      height: '100%',\n                    }}\n                    alt=\"img\"\n                    src={texture.attrs.src || DEFAULT_IMAGE_SRC}\n                  />\n                </div>\n                <IconButton onClick={() => onDelete(index)}>\n                  <RemoveOutlined />\n                </IconButton>\n              </div>\n            );\n          }\n        })}\n        {appendedContent}\n      </BaseCard>\n    </Popover>\n  );\n};\n"],"mappings":";;AAAA,SAAaA,QAAQ,QAAQ,OAAO;AACpC,SACEC,aAAa,EACbC,YAAY,EACZC,aAAa,QACR,sBAAsB;AAC7B,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,oBAAoB;AAC3B,SACEC,iBAAiB,EAIjBC,WAAW,QACN,yBAAyB;AAChC,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,UAAU,EAAEC,OAAO,QAAQ,mBAAmB;AACvD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,WAAW,EAAEC,cAAc,QAAQ,cAAc;AAC1D,SAASC,YAAY,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,WAAW,GAAGA,CAACC,IAAW,EAAEC,SAAS,GAAG,EAAE,KAAK;EACnD,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGJ,IAAI;EAExB,MAAMK,IAAI,GAAGC,IAAI,CAACC,IAAI,CACpBD,IAAI,CAACE,GAAG,CAACN,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAGG,IAAI,CAACE,GAAG,CAACJ,CAAC,GAAG,GAAG,EAAE,CAAC,CACnE,CAAC;EACD,OAAOC,IAAI,GAAGJ,SAAS;AACzB,CAAC;AAcD,OAAO,MAAMQ,WAAuB,GAAGA,CAAC;EACtCC,KAAK;EACLC,QAAQ;EACRC,QAAQ;EACRC,gBAAgB;EAEhBC,QAAQ;EACRC,KAAK;EAELC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAMqC,aAAa,gBACjBtB,OAAA,CAACR,aAAa;IACZ+B,OAAO,EAAEV,QAAQ,CAACO,WAAW,CAAE;IAC/BI,OAAO,EAAEA,CAAA,KAAM;MACbH,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAE;IACFP,QAAQ,EAAGW,GAAG,IAAKX,QAAQ,CAACW,GAAG,EAAEL,WAAW,CAAE;IAC9CL,gBAAgB,EAAGU,GAAG,IAAKV,gBAAgB,CAACU,GAAG,EAAEL,WAAW;EAAE;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CACF;EAED,IAAIhB,QAAQ,CAACiB,MAAM,IAAI,CAAC,EAAE;IACxB,oBACE9B,OAAA,CAACX,QAAQ;MACPuB,KAAK,EAAEA,KAAM;MACbmB,YAAY,eACV/B,OAAA,CAACP,UAAU;QACTuC,OAAO,EAAEA,CAAA,KAAM;UACbf,KAAK,CAAC,CAAC;QACT,CAAE;QAAAgB,QAAA,eAEFjC,OAAA,CAACJ,WAAW;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IACb;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMO,CAAC;EAEf;EAEA,oBACE7B,OAAA,CAACN,OAAO;IACNwC,IAAI,EAAEd,WAAW,IAAI,CAAE;IACvBe,YAAY,EAAGC,GAAG,IAAK;MACrB,IAAI,CAACA,GAAG,EAAE;QACRf,cAAc,CAAC,CAAC,CAAC,CAAC;MACpB;IACF,CAAE;IACFgB,OAAO,EAAEjB,WAAW,IAAI,CAAC,IAAIE,aAAc;IAC3CgB,SAAS,EAAC,YAAY;IACtBC,MAAM,EAAE,CAAE;IAAAN,QAAA,eAEVjC,OAAA,CAACX,QAAQ;MACPuB,KAAK,EAAEA,KAAM;MACbmB,YAAY,eACV/B,OAAA,CAACP,UAAU;QAACuC,OAAO,EAAEf,KAAM;QAAAgB,QAAA,eACzBjC,OAAA,CAACJ,WAAW;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACb;MAAAI,QAAA,GAEAnC,YAAY,CAACe,QAAQ,EAAE,CAACU,OAAO,EAAEiB,KAAK,KAAK;QAC1C;QACA,IAAIjB,OAAO,CAACkB,IAAI,KAAKlD,WAAW,CAACmD,KAAK,EAAE;UACtC,oBACE1C,OAAA;YAAK2C,SAAS,EAAC,WAAW;YAAAV,QAAA,gBACxBjC,OAAA,CAACL,aAAa;cACZiD,MAAM,eACJ5C,OAAA;gBACE2C,SAAS,EAAC,aAAa;gBACvBE,KAAK,EAAE;kBACLC,eAAe,EAAE3D,YAAY,CAACoC,OAAO,CAACwB,KAAK,CAAC;kBAC5CC,SAAS,EAAE/C,WAAW,CAACsB,OAAO,CAACwB,KAAK,CAAC,GACjC,iCAAiC,GACjCE;gBACN,CAAE;gBACFC,WAAW,EAAEA,CAAA,KAAM;kBACjB7B,cAAc,CAACmB,KAAK,CAAC;gBACvB;cAAE;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CACF;cACDsB,KAAK,EAAE/D,aAAa,CAACmC,OAAO,CAACwB,KAAK,CAAE;cACpCK,MAAM,EAAGC,MAAM,IAAK;gBAClB,MAAMC,GAAG,GAAGpE,aAAa,CAACmE,MAAM,CAAC;gBAEjC,IAAIC,GAAG,EAAE;kBACP,MAAMC,eAA6B,GAAG;oBACpCd,IAAI,EAAElD,WAAW,CAACmD,KAAK;oBACvBK,KAAK,EAAE;sBACL,GAAGO,GAAG;sBACNE,CAAC,EAAEjC,OAAO,CAACwB,KAAK,CAACS;oBACnB;kBACF,CAAC;kBACDC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,MAAM,EAAEE,eAAe,CAAC;kBAC9CxC,gBAAgB,CAACwC,eAAe,EAAEf,KAAK,CAAC;gBAC1C;cACF;YAAE;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACF7B,OAAA,CAACP,UAAU;cAACuC,OAAO,EAAEA,CAAA,KAAMhB,QAAQ,CAACwB,KAAK,CAAE;cAAAP,QAAA,eACzCjC,OAAA,CAACH,cAAc;gBAAA6B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CAAC;UAAA,GAnCiBW,KAAK;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAoChC,CAAC;QAEV;;QAEA;QACA,IAAIN,OAAO,CAACkB,IAAI,KAAKlD,WAAW,CAACoE,KAAK,EAAE;UACtC,oBACE3D,OAAA;YAAK2C,SAAS,EAAC,WAAW;YAAAV,QAAA,gBACxBjC,OAAA;cACE2C,SAAS,EAAC,WAAW;cACrBX,OAAO,EAAEA,CAAA,KAAM;gBACbX,cAAc,CAACmB,KAAK,CAAC;cACvB,CAAE;cAAAP,QAAA,eAEFjC,OAAA;gBACE6C,KAAK,EAAE;kBACLe,eAAe,EAAG,OAAMrC,OAAO,CAACwB,KAAK,CAACc,GAAI,GAAE;kBAC5CC,SAAS,EAAE,SAAS;kBACpBC,KAAK,EAAE,MAAM;kBACbC,MAAM,EAAE;gBACV,CAAE;gBACFC,GAAG,EAAC,KAAK;gBACTJ,GAAG,EAAEtC,OAAO,CAACwB,KAAK,CAACc,GAAG,IAAIvE;cAAkB;gBAAAoC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7C;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eACN7B,OAAA,CAACP,UAAU;cAACuC,OAAO,EAAEA,CAAA,KAAMhB,QAAQ,CAACwB,KAAK,CAAE;cAAAP,QAAA,eACzCjC,OAAA,CAACH,cAAc;gBAAA6B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CAAC;UAAA,GApBiBW,KAAK;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBhC,CAAC;QAEV;MACF,CAAC,CAAC,EACDX,eAAe;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACV,EAAA,CA9IWR,WAAuB;AAAAuD,EAAA,GAAvBvD,WAAuB;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}