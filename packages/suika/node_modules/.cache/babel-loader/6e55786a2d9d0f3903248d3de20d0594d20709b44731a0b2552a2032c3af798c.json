{"ast":null,"code":"var _jsxFileName = \"/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/Cards/StrokeCard/StrokeCard.tsx\",\n  _s = $RefreshSig$();\nimport isEqual from 'lodash.isequal';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport { EditorContext } from '../../../context';\nimport { useIntl } from 'react-intl';\nimport cloneDeep from 'lodash.clonedeep';\nimport { SetElementsAttrs } from '../../../editor/commands/set_elements_attrs';\nimport { TextureCard } from '../TextureCard';\nimport NumberInput from '../../input/NumberInput';\nimport { arrMap, forEach } from '../../../utils/array_util';\nimport { LineWidthOutlined } from '@suika/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StrokeCard = () => {\n  _s();\n  const editor = useContext(EditorContext);\n  const intl = useIntl();\n  const [strokes, setStrokes] = useState([]);\n  const [strokeWidth, setStrokeWidth] = useState(-1); // -1 means elements have different stroke width\n  const prevStrokes = useRef([]);\n  useEffect(() => {\n    if (editor) {\n      prevStrokes.current = editor.selectedElements.getItems().map(el => cloneDeep(el.stroke));\n      const handler = () => {\n        const selectedElements = editor.selectedElements.getItems();\n        if (selectedElements.length > 0) {\n          var _selectedElements$0$s;\n          /**\n           * 显示 stroke 值时，如果有的图形没有 stroke，将其排除。\n           * 添加颜色时，如果有的图形不存在 stroke，赋值给它。\n           */\n          let strokes = selectedElements[0].stroke;\n          for (let i = 1, len = selectedElements.length; i < len; i++) {\n            const currentStrokes = selectedElements[i].stroke;\n            if (!isEqual(strokes, currentStrokes)) {\n              // TODO: 标记为不相同，作为文案提示\n              strokes = [];\n              break;\n            }\n          }\n          setStrokes(strokes);\n\n          // 线宽\n          let strokeWidth = (_selectedElements$0$s = selectedElements[0].strokeWidth) !== null && _selectedElements$0$s !== void 0 ? _selectedElements$0$s : 0;\n          for (let i = 1, len = selectedElements.length; i < len; i++) {\n            var _selectedElements$i$s;\n            const currentStrokeWidth = (_selectedElements$i$s = selectedElements[i].strokeWidth) !== null && _selectedElements$i$s !== void 0 ? _selectedElements$i$s : 0;\n            if (strokeWidth !== currentStrokeWidth) {\n              strokeWidth = -1;\n              break;\n            }\n          }\n          setStrokeWidth(strokeWidth);\n        }\n      };\n      editor.sceneGraph.on('render', handler);\n      return () => {\n        editor.sceneGraph.off('render', handler);\n      };\n    }\n  }, [editor]);\n\n  /**\n   * update stroke and return a new stroke\n   */\n  const updateStrokeWithoutRecord = (newTexture, index) => {\n    if (!editor) return;\n    const newStrokes = [...strokes];\n    newStrokes[index] = newTexture;\n    setStrokes(newStrokes);\n    const selectItems = editor.selectedElements.getItems();\n    selectItems.forEach(item => {\n      item.stroke = cloneDeep(newStrokes);\n    });\n    return newStrokes;\n  };\n  const addStroke = () => {\n    if (!editor) return;\n    const newTexture = cloneDeep(editor.setting.get(strokes.length ? 'addedTexture' : 'firstStroke'));\n    const newStrokes = [...strokes, newTexture];\n    setStrokes(newStrokes);\n    const selectItems = editor.selectedElements.getItems();\n    selectItems.forEach(item => {\n      item.stroke = cloneDeep(newStrokes);\n    });\n    pushToHistory('Add Stroke', selectItems, newStrokes, true);\n    editor === null || editor === void 0 ? void 0 : editor.sceneGraph.render();\n  };\n  const deleteStroke = index => {\n    if (!editor) return;\n    const newStrokes = strokes.filter((_, i) => i !== index);\n    setStrokes(newStrokes);\n    const selectItems = editor.selectedElements.getItems();\n    selectItems.forEach(item => {\n      item.stroke = cloneDeep(newStrokes);\n    });\n    pushToHistory('Update Stroke', selectItems, newStrokes);\n    editor.sceneGraph.render();\n  };\n  const pushToHistory = (cmdDesc, selectedElements, newStroke, isAddAction) => {\n    if (!editor) return;\n    const prevAttrs = selectedElements.map((_, i) => ({\n      stroke: cloneDeep(prevStrokes.current[i])\n    }));\n    const attrs = arrMap(selectedElements, () => ({\n      stroke: cloneDeep(newStroke)\n    }));\n\n    // case 1: add first stroke，change strokeWidth to 1\n    if (isAddAction && newStroke.length === 1) {\n      selectedElements.forEach((el, i) => {\n        prevAttrs[i].strokeWidth = el.strokeWidth;\n      });\n      const defaultStrokeWidth = editor.setting.get('strokeWidth');\n      forEach(selectedElements, (el, i) => {\n        el.strokeWidth = defaultStrokeWidth;\n        attrs[i].strokeWidth = defaultStrokeWidth;\n      });\n    }\n    // case 2: delete all stroke，change strokeWidth to 0\n    else if (newStroke.length === 0) {\n      selectedElements.forEach((el, i) => {\n        prevAttrs[i].strokeWidth = el.strokeWidth;\n      });\n      forEach(selectedElements, el => {\n        delete el.strokeWidth;\n      });\n    }\n    editor.commandManager.pushCommand(new SetElementsAttrs(cmdDesc, selectedElements, attrs, prevAttrs));\n    prevStrokes.current = selectedElements.map(el => cloneDeep(el.fill));\n  };\n  const updateStrokeWidth = newStrokeWidth => {\n    if (!editor) return;\n    const selectedElements = editor.selectedElements.getItems();\n    editor.commandManager.pushCommand(new SetElementsAttrs('update strokeWidth', selectedElements, {\n      strokeWidth: newStrokeWidth\n    }, arrMap(selectedElements, item => ({\n      strokeWidth: item.strokeWidth\n    }))));\n    selectedElements.forEach(item => {\n      item.strokeWidth = newStrokeWidth;\n    });\n    setStrokeWidth(newStrokeWidth);\n    editor.sceneGraph.render();\n  };\n  return /*#__PURE__*/_jsxDEV(TextureCard, {\n    title: intl.formatMessage({\n      id: 'stroke'\n    }),\n    textures: strokes,\n    appendedContent: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '0 8px'\n      },\n      children: /*#__PURE__*/_jsxDEV(NumberInput, {\n        prefix: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            paddingLeft: '3px',\n            color: '#b3b3b3',\n            display: 'flex'\n          },\n          children: /*#__PURE__*/_jsxDEV(LineWidthOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this),\n        value: strokeWidth,\n        min: 0,\n        onBlur: updateStrokeWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this),\n    onChange: (newTexture, i) => {\n      if (!editor) return;\n      updateStrokeWithoutRecord(newTexture, i);\n      editor.sceneGraph.render();\n    },\n    onChangeComplete: (newTexture, i) => {\n      if (!editor) return;\n      const newStrokes = updateStrokeWithoutRecord(newTexture, i);\n      pushToHistory('Change Stroke', editor.selectedElements.getItems(), newStrokes);\n      editor.sceneGraph.render();\n    },\n    onAdd: addStroke,\n    onDelete: deleteStroke\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(StrokeCard, \"WYEP9kRfH17r4ZAgLQ9Yftl6WeA=\", false, function () {\n  return [useIntl];\n});\n_c = StrokeCard;\nvar _c;\n$RefreshReg$(_c, \"StrokeCard\");","map":{"version":3,"names":["isEqual","useContext","useEffect","useRef","useState","EditorContext","useIntl","cloneDeep","SetElementsAttrs","TextureCard","NumberInput","arrMap","forEach","LineWidthOutlined","jsxDEV","_jsxDEV","StrokeCard","_s","editor","intl","strokes","setStrokes","strokeWidth","setStrokeWidth","prevStrokes","current","selectedElements","getItems","map","el","stroke","handler","length","_selectedElements$0$s","i","len","currentStrokes","_selectedElements$i$s","currentStrokeWidth","sceneGraph","on","off","updateStrokeWithoutRecord","newTexture","index","newStrokes","selectItems","item","addStroke","setting","get","pushToHistory","render","deleteStroke","filter","_","cmdDesc","newStroke","isAddAction","prevAttrs","attrs","defaultStrokeWidth","commandManager","pushCommand","fill","updateStrokeWidth","newStrokeWidth","title","formatMessage","id","textures","appendedContent","style","padding","children","prefix","paddingLeft","color","display","fileName","_jsxFileName","lineNumber","columnNumber","value","min","onBlur","onChange","onChangeComplete","onAdd","onDelete","_c","$RefreshReg$"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/Cards/StrokeCard/StrokeCard.tsx"],"sourcesContent":["import isEqual from 'lodash.isequal';\nimport { FC, useContext, useEffect, useRef, useState } from 'react';\nimport { EditorContext } from '../../../context';\n\nimport { useIntl } from 'react-intl';\nimport { ITexture } from '../../../editor/texture';\nimport cloneDeep from 'lodash.clonedeep';\nimport {\n  ISetElementsAttrsType,\n  SetElementsAttrs,\n} from '../../../editor/commands/set_elements_attrs';\nimport { TextureCard } from '../TextureCard';\nimport { Graph } from '../../../editor/scene/graph';\nimport NumberInput from '../../input/NumberInput';\nimport { arrMap, forEach } from '../../../utils/array_util';\nimport { LineWidthOutlined } from '@suika/icons';\n\nexport const StrokeCard: FC = () => {\n  const editor = useContext(EditorContext);\n  const intl = useIntl();\n\n  const [strokes, setStrokes] = useState<ITexture[]>([]);\n  const [strokeWidth, setStrokeWidth] = useState(-1); // -1 means elements have different stroke width\n  const prevStrokes = useRef<ITexture[][]>([]);\n\n  useEffect(() => {\n    if (editor) {\n      prevStrokes.current = editor.selectedElements\n        .getItems()\n        .map((el) => cloneDeep(el.stroke));\n\n      const handler = () => {\n        const selectedElements = editor.selectedElements.getItems();\n        if (selectedElements.length > 0) {\n          /**\n           * 显示 stroke 值时，如果有的图形没有 stroke，将其排除。\n           * 添加颜色时，如果有的图形不存在 stroke，赋值给它。\n           */\n          let strokes = selectedElements[0].stroke;\n          for (let i = 1, len = selectedElements.length; i < len; i++) {\n            const currentStrokes = selectedElements[i].stroke;\n            if (!isEqual(strokes, currentStrokes)) {\n              // TODO: 标记为不相同，作为文案提示\n              strokes = [];\n              break;\n            }\n          }\n          setStrokes(strokes);\n\n          // 线宽\n          let strokeWidth = selectedElements[0].strokeWidth ?? 0;\n          for (let i = 1, len = selectedElements.length; i < len; i++) {\n            const currentStrokeWidth = selectedElements[i].strokeWidth ?? 0;\n            if (strokeWidth !== currentStrokeWidth) {\n              strokeWidth = -1;\n              break;\n            }\n          }\n          setStrokeWidth(strokeWidth);\n        }\n      };\n\n      editor.sceneGraph.on('render', handler);\n      return () => {\n        editor.sceneGraph.off('render', handler);\n      };\n    }\n  }, [editor]);\n\n  /**\n   * update stroke and return a new stroke\n   */\n  const updateStrokeWithoutRecord = (newTexture: ITexture, index: number) => {\n    if (!editor) return;\n\n    const newStrokes = [...strokes];\n\n    newStrokes[index] = newTexture;\n    setStrokes(newStrokes);\n\n    const selectItems = editor.selectedElements.getItems();\n\n    selectItems.forEach((item) => {\n      item.stroke = cloneDeep(newStrokes);\n    });\n\n    return newStrokes;\n  };\n\n  const addStroke = () => {\n    if (!editor) return;\n\n    const newTexture = cloneDeep(\n      editor.setting.get(strokes.length ? 'addedTexture' : 'firstStroke'),\n    );\n    const newStrokes = [...strokes, newTexture];\n    setStrokes(newStrokes);\n\n    const selectItems = editor.selectedElements.getItems();\n    selectItems.forEach((item) => {\n      item.stroke = cloneDeep(newStrokes);\n    });\n    pushToHistory('Add Stroke', selectItems, newStrokes, true);\n    editor?.sceneGraph.render();\n  };\n\n  const deleteStroke = (index: number) => {\n    if (!editor) return;\n\n    const newStrokes = strokes.filter((_, i) => i !== index);\n    setStrokes(newStrokes);\n\n    const selectItems = editor.selectedElements.getItems();\n    selectItems.forEach((item) => {\n      item.stroke = cloneDeep(newStrokes);\n    });\n    pushToHistory('Update Stroke', selectItems, newStrokes);\n    editor.sceneGraph.render();\n  };\n\n  const pushToHistory = (\n    cmdDesc: string,\n    selectedElements: Graph[],\n    newStroke: ITexture[],\n    isAddAction?: boolean,\n  ) => {\n    if (!editor) return;\n\n    const prevAttrs: ISetElementsAttrsType[] = selectedElements.map((_, i) => ({\n      stroke: cloneDeep(prevStrokes.current[i]),\n    }));\n    const attrs: ISetElementsAttrsType[] = arrMap(selectedElements, () => ({\n      stroke: cloneDeep(newStroke),\n    }));\n\n    // case 1: add first stroke，change strokeWidth to 1\n    if (isAddAction && newStroke.length === 1) {\n      selectedElements.forEach((el, i) => {\n        prevAttrs[i].strokeWidth = el.strokeWidth;\n      });\n\n      const defaultStrokeWidth = editor.setting.get('strokeWidth');\n      forEach(selectedElements, (el, i) => {\n        el.strokeWidth = defaultStrokeWidth;\n        attrs[i].strokeWidth = defaultStrokeWidth;\n      });\n    }\n    // case 2: delete all stroke，change strokeWidth to 0\n    else if (newStroke.length === 0) {\n      selectedElements.forEach((el, i) => {\n        prevAttrs[i].strokeWidth = el.strokeWidth;\n      });\n\n      forEach(selectedElements, (el) => {\n        delete el.strokeWidth;\n      });\n    }\n\n    editor.commandManager.pushCommand(\n      new SetElementsAttrs(cmdDesc, selectedElements, attrs, prevAttrs),\n    );\n\n    prevStrokes.current = selectedElements.map((el) => cloneDeep(el.fill));\n  };\n\n  const updateStrokeWidth = (newStrokeWidth: number) => {\n    if (!editor) return;\n\n    const selectedElements = editor.selectedElements.getItems();\n    editor.commandManager.pushCommand(\n      new SetElementsAttrs(\n        'update strokeWidth',\n        selectedElements,\n        { strokeWidth: newStrokeWidth },\n        arrMap(selectedElements, (item) => ({ strokeWidth: item.strokeWidth })),\n      ),\n    );\n\n    selectedElements.forEach((item) => {\n      item.strokeWidth = newStrokeWidth;\n    });\n    setStrokeWidth(newStrokeWidth);\n\n    editor.sceneGraph.render();\n  };\n\n  return (\n    <TextureCard\n      title={intl.formatMessage({ id: 'stroke' })}\n      textures={strokes}\n      appendedContent={\n        <div style={{ padding: '0 8px' }}>\n          <NumberInput\n            prefix={\n              <div\n                style={{\n                  paddingLeft: '3px',\n                  color: '#b3b3b3',\n                  display: 'flex',\n                }}\n              >\n                <LineWidthOutlined />\n              </div>\n            }\n            value={strokeWidth}\n            min={0}\n            onBlur={updateStrokeWidth}\n          />\n        </div>\n      }\n      onChange={(newTexture, i) => {\n        if (!editor) return;\n        updateStrokeWithoutRecord(newTexture, i);\n        editor.sceneGraph.render();\n      }}\n      onChangeComplete={(newTexture, i) => {\n        if (!editor) return;\n        const newStrokes = updateStrokeWithoutRecord(newTexture, i);\n\n        pushToHistory(\n          'Change Stroke',\n          editor.selectedElements.getItems(),\n          newStrokes!,\n        );\n        editor.sceneGraph.render();\n      }}\n      onAdd={addStroke}\n      onDelete={deleteStroke}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}