{"ast":null,"code":"import hotkeys from 'hotkeys-js';\nimport EventEmitter from '../../utils/event_emitter';\nimport { MoveGraphsKeyBinding } from './move_graphs_key_binding';\nimport { CommandKeyBinding } from './command_key_binding';\n/**\n * 按键、鼠标等事件管理\n */\nexport class HostEventManager {\n  constructor(editor) {\n    this.editor = editor;\n    this.isShiftPressing = false;\n    this.isCtrlPressing = false;\n    this.isCommandPressing = false;\n    this.isSpacePressing = false;\n    this.isDraggingCanvasBySpace = false;\n    this.isEnableDragCanvasBySpace = true;\n    this.isEnableDelete = true;\n    this.isEnableContextMenu = true;\n    // isEnableMoveSelectedElementByKey = true; // no use now\n    this.moveGraphsKeyBinding = void 0;\n    this.commandKeyBinding = void 0;\n    this.prevCursor = '';\n    this.eventEmitter = new EventEmitter();\n    this.unbindHandlers = [];\n    this.moveGraphsKeyBinding = new MoveGraphsKeyBinding(editor);\n    this.commandKeyBinding = new CommandKeyBinding(editor);\n  }\n  bindHotkeys() {\n    this.bindModifiersRecordEvent(); // 记录 isShiftPressing 等值\n    this.bindWheelEventToZoom(); // 滚轮移动画布\n    this.bindDragCanvasEvent(); // 空格和拖拽移动画布\n    this.bindContextMenu();\n    this.moveGraphsKeyBinding.bindKey();\n    this.commandKeyBinding.bindKey();\n  }\n  bindModifiersRecordEvent() {\n    // record if shift, ctrl, command is pressed\n    hotkeys('*', {\n      keydown: true,\n      keyup: true\n    }, event => {\n      if (hotkeys.shift) {\n        const prev = this.isShiftPressing;\n        if (event.type === 'keydown') {\n          this.isShiftPressing = true;\n        } else if (event.type === 'keyup') {\n          this.isShiftPressing = false;\n        }\n        if (prev !== this.isShiftPressing) {\n          this.eventEmitter.emit('shiftToggle');\n        }\n      }\n      if (hotkeys.ctrl) {\n        if (event.type === 'keydown') {\n          this.isCtrlPressing = true;\n        } else if (event.type === 'keyup') {\n          this.isCtrlPressing = false;\n        }\n      }\n      if (hotkeys.command) {\n        if (event.type === 'keydown') {\n          this.isCommandPressing = true;\n        } else if (event.type === 'keyup') {\n          this.isCommandPressing = false;\n        }\n      }\n    });\n    hotkeys('space', {\n      keydown: true,\n      keyup: true\n    }, event => {\n      const prev = this.isSpacePressing;\n      if (event.type === 'keydown') {\n        this.isSpacePressing = true;\n      } else if (event.type === 'keyup') {\n        this.isSpacePressing = false;\n      }\n\n      // 按住按键会不停触发响应函数，下面这种写法则只会在按下和释放时分别执行一次\n      if (this.isEnableDragCanvasBySpace && prev !== this.isSpacePressing) {\n        if (this.isSpacePressing) {\n          this.prevCursor = this.editor.getCursor();\n          this.editor.setCursor('grab');\n        } else {\n          if (!this.isDraggingCanvasBySpace) {\n            this.editor.setCursor(this.prevCursor);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * shiftToggle 会在切换时触发。按住 shift 不放，只会触发一次\n   */\n  on(eventName, handler) {\n    this.eventEmitter.on(eventName, handler);\n  }\n  off(eventName, handler) {\n    this.eventEmitter.off(eventName, handler);\n  }\n  bindWheelEventToZoom() {\n    const editor = this.editor;\n    const handler = event => {\n      if (this.isCtrlPressing || this.isCommandPressing) {\n        event.preventDefault();\n        const {\n          x: cx,\n          y: cy\n        } = this.editor.getCursorXY(event);\n        if (event.deltaY > 0) {\n          editor.zoomManager.zoomOut(cx, cy);\n          editor.sceneGraph.render();\n        } else if (event.deltaY < 0) {\n          editor.zoomManager.zoomIn(cx, cy);\n          editor.sceneGraph.render();\n        }\n      } else {\n        const zoom = editor.zoomManager.getZoom();\n        editor.viewportManager.translate(event.deltaX / zoom, event.deltaY / zoom);\n        editor.sceneGraph.render();\n      }\n    };\n    editor.canvasElement.addEventListener('wheel', handler);\n    this.unbindHandlers.push(() => {\n      editor.canvasElement.removeEventListener('wheel', handler);\n    });\n  }\n  bindDragCanvasEvent() {\n    let isEnableDrag = false;\n    let startPointer = null;\n    let prevViewport;\n\n    // 鼠标按下\n    const pointerdownHandler = event => {\n      isEnableDrag = false;\n      startPointer = null;\n      this.isDraggingCanvasBySpace = false;\n      if (this.isEnableDragCanvasBySpace && this.isSpacePressing) {\n        this.editor.setCursor('grabbing');\n        this.isDraggingCanvasBySpace = true;\n        startPointer = this.editor.getCursorXY(event);\n        prevViewport = this.editor.viewportManager.getViewport();\n      }\n    };\n    this.editor.canvasElement.addEventListener('pointerdown', pointerdownHandler);\n\n    // drag canvas when mouse move\n    const pointermoveHandler = event => {\n      if (startPointer) {\n        const viewportPos = this.editor.getCursorXY(event);\n        const dx = viewportPos.x - startPointer.x;\n        const dy = viewportPos.y - startPointer.y;\n        const dragBlockStep = this.editor.setting.get('dragBlockStep');\n        if (!isEnableDrag && Math.abs(dx) > dragBlockStep || Math.abs(dy) > dragBlockStep) {\n          isEnableDrag = true;\n        }\n        if (isEnableDrag) {\n          const zoom = this.editor.zoomManager.getZoom();\n          const viewportX = prevViewport.x - dx / zoom;\n          const viewportY = prevViewport.y - dy / zoom;\n          this.editor.viewportManager.setViewport({\n            x: viewportX,\n            y: viewportY\n          });\n          this.editor.sceneGraph.render();\n        }\n      }\n    };\n    window.addEventListener('pointermove', pointermoveHandler);\n\n    // 鼠标释放\n    const pointerupHandler = () => {\n      if (this.isDraggingCanvasBySpace) {\n        this.editor.setCursor(this.isSpacePressing ? 'grab' : this.prevCursor);\n      }\n      isEnableDrag = false;\n      startPointer = null;\n      // we hope reset isDraggingCanvasBySpace after exec tool.end()\n      setTimeout(() => {\n        this.isDraggingCanvasBySpace = false;\n      });\n    };\n    window.addEventListener('pointerup', pointerupHandler);\n    this.unbindHandlers.push(() => {\n      this.editor.canvasElement.removeEventListener('pointerdown', pointerdownHandler);\n      window.removeEventListener('pointermove', pointermoveHandler);\n      window.removeEventListener('pointerup', pointerupHandler);\n    });\n  }\n  bindContextMenu() {\n    const handler = e => {\n      e.preventDefault();\n      if (this.isEnableContextMenu) {\n        this.eventEmitter.emit('contextmenu', {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    };\n    this.editor.canvasElement.addEventListener('contextmenu', handler);\n    this.unbindHandlers.push(() => {\n      this.editor.canvasElement.removeEventListener('contextmenu', handler);\n    });\n  }\n  enableDragBySpace() {\n    this.isEnableDragCanvasBySpace = true;\n  }\n  disableDragBySpace() {\n    this.isEnableDragCanvasBySpace = false;\n  }\n  enableDelete() {\n    this.isEnableDelete = true;\n  }\n  disableDelete() {\n    this.isEnableDelete = false;\n  }\n  enableContextmenu() {\n    this.isEnableContextMenu = true;\n  }\n  disableContextmenu() {\n    this.isEnableContextMenu = false;\n  }\n  destroy() {\n    hotkeys.unbind();\n    this.unbindHandlers.forEach(fn => fn());\n    this.unbindHandlers = [];\n    this.moveGraphsKeyBinding.destroy();\n    this.commandKeyBinding.destroy();\n  }\n}","map":{"version":3,"names":["hotkeys","EventEmitter","MoveGraphsKeyBinding","CommandKeyBinding","HostEventManager","constructor","editor","isShiftPressing","isCtrlPressing","isCommandPressing","isSpacePressing","isDraggingCanvasBySpace","isEnableDragCanvasBySpace","isEnableDelete","isEnableContextMenu","moveGraphsKeyBinding","commandKeyBinding","prevCursor","eventEmitter","unbindHandlers","bindHotkeys","bindModifiersRecordEvent","bindWheelEventToZoom","bindDragCanvasEvent","bindContextMenu","bindKey","keydown","keyup","event","shift","prev","type","emit","ctrl","command","getCursor","setCursor","on","eventName","handler","off","preventDefault","x","cx","y","cy","getCursorXY","deltaY","zoomManager","zoomOut","sceneGraph","render","zoomIn","zoom","getZoom","viewportManager","translate","deltaX","canvasElement","addEventListener","push","removeEventListener","isEnableDrag","startPointer","prevViewport","pointerdownHandler","getViewport","pointermoveHandler","viewportPos","dx","dy","dragBlockStep","setting","get","Math","abs","viewportX","viewportY","setViewport","window","pointerupHandler","setTimeout","e","clientX","clientY","enableDragBySpace","disableDragBySpace","enableDelete","disableDelete","enableContextmenu","disableContextmenu","destroy","unbind","forEach","fn"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/host_event_manager/host_event_manager.ts"],"sourcesContent":["import hotkeys from 'hotkeys-js';\nimport { IBox, IPoint } from '../../type';\nimport EventEmitter from '../../utils/event_emitter';\nimport { Editor } from '../editor';\nimport { MoveGraphsKeyBinding } from './move_graphs_key_binding';\nimport { CommandKeyBinding } from './command_key_binding';\n\ninterface Events {\n  shiftToggle(): void;\n  contextmenu(point: IPoint): void;\n}\n\n/**\n * 按键、鼠标等事件管理\n */\nexport class HostEventManager {\n  isShiftPressing = false;\n  isCtrlPressing = false;\n  isCommandPressing = false;\n  isSpacePressing = false;\n\n  isDraggingCanvasBySpace = false;\n  isEnableDragCanvasBySpace = true;\n  isEnableDelete = true;\n  isEnableContextMenu = true;\n  // isEnableMoveSelectedElementByKey = true; // no use now\n\n  private moveGraphsKeyBinding: MoveGraphsKeyBinding;\n  private commandKeyBinding: CommandKeyBinding;\n\n  private prevCursor = '';\n  private eventEmitter = new EventEmitter<Events>();\n  private unbindHandlers: Array<() => void> = [];\n\n  constructor(private editor: Editor) {\n    this.moveGraphsKeyBinding = new MoveGraphsKeyBinding(editor);\n    this.commandKeyBinding = new CommandKeyBinding(editor);\n  }\n  bindHotkeys() {\n    this.bindModifiersRecordEvent(); // 记录 isShiftPressing 等值\n    this.bindWheelEventToZoom(); // 滚轮移动画布\n    this.bindDragCanvasEvent(); // 空格和拖拽移动画布\n    this.bindContextMenu();\n\n    this.moveGraphsKeyBinding.bindKey();\n    this.commandKeyBinding.bindKey();\n  }\n  private bindModifiersRecordEvent() {\n    // record if shift, ctrl, command is pressed\n    hotkeys('*', { keydown: true, keyup: true }, (event) => {\n      if (hotkeys.shift) {\n        const prev = this.isShiftPressing;\n        if (event.type === 'keydown') {\n          this.isShiftPressing = true;\n        } else if (event.type === 'keyup') {\n          this.isShiftPressing = false;\n        }\n\n        if (prev !== this.isShiftPressing) {\n          this.eventEmitter.emit('shiftToggle');\n        }\n      }\n      if (hotkeys.ctrl) {\n        if (event.type === 'keydown') {\n          this.isCtrlPressing = true;\n        } else if (event.type === 'keyup') {\n          this.isCtrlPressing = false;\n        }\n      }\n      if (hotkeys.command) {\n        if (event.type === 'keydown') {\n          this.isCommandPressing = true;\n        } else if (event.type === 'keyup') {\n          this.isCommandPressing = false;\n        }\n      }\n    });\n\n    hotkeys('space', { keydown: true, keyup: true }, (event) => {\n      const prev = this.isSpacePressing;\n      if (event.type === 'keydown') {\n        this.isSpacePressing = true;\n      } else if (event.type === 'keyup') {\n        this.isSpacePressing = false;\n      }\n\n      // 按住按键会不停触发响应函数，下面这种写法则只会在按下和释放时分别执行一次\n      if (this.isEnableDragCanvasBySpace && prev !== this.isSpacePressing) {\n        if (this.isSpacePressing) {\n          this.prevCursor = this.editor.getCursor();\n          this.editor.setCursor('grab');\n        } else {\n          if (!this.isDraggingCanvasBySpace) {\n            this.editor.setCursor(this.prevCursor);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * shiftToggle 会在切换时触发。按住 shift 不放，只会触发一次\n   */\n  on<K extends keyof Events>(eventName: K, handler: Events[K]) {\n    this.eventEmitter.on(eventName, handler);\n  }\n  off<K extends keyof Events>(eventName: K, handler: Events[K]) {\n    this.eventEmitter.off(eventName, handler);\n  }\n\n  private bindWheelEventToZoom() {\n    const editor = this.editor;\n    const handler = (event: WheelEvent) => {\n      if (this.isCtrlPressing || this.isCommandPressing) {\n        event.preventDefault();\n        const { x: cx, y: cy } = this.editor.getCursorXY(event);\n        if (event.deltaY > 0) {\n          editor.zoomManager.zoomOut(cx, cy);\n          editor.sceneGraph.render();\n        } else if (event.deltaY < 0) {\n          editor.zoomManager.zoomIn(cx, cy);\n          editor.sceneGraph.render();\n        }\n      } else {\n        const zoom = editor.zoomManager.getZoom();\n        editor.viewportManager.translate(\n          event.deltaX / zoom,\n          event.deltaY / zoom,\n        );\n        editor.sceneGraph.render();\n      }\n    };\n    editor.canvasElement.addEventListener('wheel', handler);\n\n    this.unbindHandlers.push(() => {\n      editor.canvasElement.removeEventListener('wheel', handler);\n    });\n  }\n\n  private bindDragCanvasEvent() {\n    let isEnableDrag = false;\n    let startPointer: IPoint | null = null;\n    let prevViewport: IBox;\n\n    // 鼠标按下\n    const pointerdownHandler = (event: PointerEvent) => {\n      isEnableDrag = false;\n      startPointer = null;\n      this.isDraggingCanvasBySpace = false;\n\n      if (this.isEnableDragCanvasBySpace && this.isSpacePressing) {\n        this.editor.setCursor('grabbing');\n        this.isDraggingCanvasBySpace = true;\n        startPointer = this.editor.getCursorXY(event);\n        prevViewport = this.editor.viewportManager.getViewport();\n      }\n    };\n    this.editor.canvasElement.addEventListener(\n      'pointerdown',\n      pointerdownHandler,\n    );\n\n    // drag canvas when mouse move\n    const pointermoveHandler = (event: PointerEvent) => {\n      if (startPointer) {\n        const viewportPos = this.editor.getCursorXY(event);\n        const dx = viewportPos.x - startPointer.x;\n        const dy = viewportPos.y - startPointer.y;\n        const dragBlockStep = this.editor.setting.get('dragBlockStep');\n        if (\n          (!isEnableDrag && Math.abs(dx) > dragBlockStep) ||\n          Math.abs(dy) > dragBlockStep\n        ) {\n          isEnableDrag = true;\n        }\n        if (isEnableDrag) {\n          const zoom = this.editor.zoomManager.getZoom();\n          const viewportX = prevViewport.x - dx / zoom;\n          const viewportY = prevViewport.y - dy / zoom;\n\n          this.editor.viewportManager.setViewport({\n            x: viewportX,\n            y: viewportY,\n          });\n          this.editor.sceneGraph.render();\n        }\n      }\n    };\n    window.addEventListener('pointermove', pointermoveHandler);\n\n    // 鼠标释放\n    const pointerupHandler = () => {\n      if (this.isDraggingCanvasBySpace) {\n        this.editor.setCursor(this.isSpacePressing ? 'grab' : this.prevCursor);\n      }\n      isEnableDrag = false;\n      startPointer = null;\n      // we hope reset isDraggingCanvasBySpace after exec tool.end()\n      setTimeout(() => {\n        this.isDraggingCanvasBySpace = false;\n      });\n    };\n    window.addEventListener('pointerup', pointerupHandler);\n\n    this.unbindHandlers.push(() => {\n      this.editor.canvasElement.removeEventListener(\n        'pointerdown',\n        pointerdownHandler,\n      );\n      window.removeEventListener('pointermove', pointermoveHandler);\n      window.removeEventListener('pointerup', pointerupHandler);\n    });\n  }\n\n  private bindContextMenu() {\n    const handler = (e: MouseEvent) => {\n      e.preventDefault();\n      if (this.isEnableContextMenu) {\n        this.eventEmitter.emit('contextmenu', { x: e.clientX, y: e.clientY });\n      }\n    };\n    this.editor.canvasElement.addEventListener('contextmenu', handler);\n    this.unbindHandlers.push(() => {\n      this.editor.canvasElement.removeEventListener('contextmenu', handler);\n    });\n  }\n\n  enableDragBySpace() {\n    this.isEnableDragCanvasBySpace = true;\n  }\n  disableDragBySpace() {\n    this.isEnableDragCanvasBySpace = false;\n  }\n  enableDelete() {\n    this.isEnableDelete = true;\n  }\n  disableDelete() {\n    this.isEnableDelete = false;\n  }\n  enableContextmenu() {\n    this.isEnableContextMenu = true;\n  }\n  disableContextmenu() {\n    this.isEnableContextMenu = false;\n  }\n  destroy() {\n    hotkeys.unbind();\n    this.unbindHandlers.forEach((fn) => fn());\n    this.unbindHandlers = [];\n    this.moveGraphsKeyBinding.destroy();\n    this.commandKeyBinding.destroy();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}