{"ast":null,"code":"import { Graph } from './graph';\nimport { rotateInCanvas } from '../../utils/canvas';\nimport { GraphType } from '../../type';\nimport { TextureType } from '../texture';\nimport { parseRGBAStr } from '../../utils/color';\nconst DEFAULT_TEXT_WIDTH = 80;\nconst DEFAULT_TEXT_WEIGHT = 30;\nconst tmpCtx = document.createElement('canvas').getContext('2d');\nexport class TextGraph extends Graph {\n  constructor(options) {\n    var _options$width, _options$height;\n    super({\n      ...options,\n      type: GraphType.Text,\n      width: (_options$width = options.width) !== null && _options$width !== void 0 ? _options$width : DEFAULT_TEXT_WIDTH,\n      height: (_options$height = options.height) !== null && _options$height !== void 0 ? _options$height : DEFAULT_TEXT_WEIGHT\n    });\n    this.content = void 0;\n    this.fontSize = void 0;\n    this.autoFit = void 0;\n    if (options.autoFit) {\n      tmpCtx.font = `${options.fontSize}px sans-serif`;\n      const {\n        width\n      } = tmpCtx.measureText(options.content);\n      this.width = width;\n      this.height = options.fontSize;\n    }\n    this.autoFit = options.autoFit;\n    this.content = options.content;\n    this.fontSize = options.fontSize;\n  }\n  getAttrs() {\n    return {\n      ...super.getAttrs(),\n      content: this.content,\n      fontSize: this.fontSize,\n      autoFit: this.autoFit\n    };\n  }\n  renderFillAndStrokeTexture(ctx) {\n    if (this.rotation) {\n      const cx = this.x + this.width / 2;\n      const cy = this.y + this.height / 2;\n      rotateInCanvas(ctx, this.rotation, cx, cy);\n    }\n    ctx.beginPath();\n    ctx.textBaseline = 'top';\n    ctx.font = `${this.fontSize}px sans-serif`;\n    for (const texture of this.fill) {\n      switch (texture.type) {\n        case TextureType.Solid:\n          {\n            ctx.fillStyle = parseRGBAStr(texture.attrs);\n            break;\n          }\n        case TextureType.Image:\n          {\n            // TODO:\n          }\n      }\n    }\n    if (this.stroke) {\n      // TODO:\n    }\n    ctx.fillText(this.content, this.x, this.y);\n  }\n}","map":{"version":3,"names":["Graph","rotateInCanvas","GraphType","TextureType","parseRGBAStr","DEFAULT_TEXT_WIDTH","DEFAULT_TEXT_WEIGHT","tmpCtx","document","createElement","getContext","TextGraph","constructor","options","_options$width","_options$height","type","Text","width","height","content","fontSize","autoFit","font","measureText","getAttrs","renderFillAndStrokeTexture","ctx","rotation","cx","x","cy","y","beginPath","textBaseline","texture","fill","Solid","fillStyle","attrs","Image","stroke","fillText"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/scene/text.ts"],"sourcesContent":["import { Graph, GraphAttrs } from './graph';\nimport { Optional } from '../../type';\nimport { rotateInCanvas } from '../../utils/canvas';\nimport { GraphType } from '../../type';\nimport { TextureType } from '../texture';\nimport { parseRGBAStr } from '../../utils/color';\n\nexport interface TextAttrs extends GraphAttrs {\n  content: string;\n  fontSize: number;\n  autoFit?: boolean;\n}\n\nconst DEFAULT_TEXT_WIDTH = 80;\nconst DEFAULT_TEXT_WEIGHT = 30;\n\nconst tmpCtx = document.createElement('canvas').getContext('2d')!;\n\nexport class TextGraph extends Graph {\n  content: string;\n  fontSize: number;\n  autoFit?: boolean;\n  constructor(options: Optional<TextAttrs, 'width' | 'height'>) {\n    super({\n      ...options,\n      type: GraphType.Text,\n      width: options.width ?? DEFAULT_TEXT_WIDTH,\n      height: options.height ?? DEFAULT_TEXT_WEIGHT,\n    });\n\n    if (options.autoFit) {\n      tmpCtx.font = `${options.fontSize}px sans-serif`;\n      const { width } = tmpCtx.measureText(options.content);\n      this.width = width;\n      this.height = options.fontSize;\n    }\n\n    this.autoFit = options.autoFit;\n    this.content = options.content;\n    this.fontSize = options.fontSize;\n  }\n  getAttrs() {\n    return {\n      ...super.getAttrs(),\n      content: this.content,\n      fontSize: this.fontSize,\n      autoFit: this.autoFit,\n    };\n  }\n\n  renderFillAndStrokeTexture(ctx: CanvasRenderingContext2D) {\n    if (this.rotation) {\n      const cx = this.x + this.width / 2;\n      const cy = this.y + this.height / 2;\n\n      rotateInCanvas(ctx, this.rotation, cx, cy);\n    }\n    ctx.beginPath();\n    ctx.textBaseline = 'top';\n    ctx.font = `${this.fontSize}px sans-serif`;\n\n    for (const texture of this.fill) {\n      switch (texture.type) {\n        case TextureType.Solid: {\n          ctx.fillStyle = parseRGBAStr(texture.attrs);\n          break;\n        }\n        case TextureType.Image: {\n          // TODO:\n        }\n      }\n    }\n    if (this.stroke) {\n      // TODO:\n    }\n\n    ctx.fillText(this.content, this.x, this.y);\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAoB,SAAS;AAE3C,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,YAAY,QAAQ,mBAAmB;AAQhD,MAAMC,kBAAkB,GAAG,EAAE;AAC7B,MAAMC,mBAAmB,GAAG,EAAE;AAE9B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAACC,UAAU,CAAC,IAAI,CAAE;AAEjE,OAAO,MAAMC,SAAS,SAASX,KAAK,CAAC;EAInCY,WAAWA,CAACC,OAAgD,EAAE;IAAA,IAAAC,cAAA,EAAAC,eAAA;IAC5D,KAAK,CAAC;MACJ,GAAGF,OAAO;MACVG,IAAI,EAAEd,SAAS,CAACe,IAAI;MACpBC,KAAK,GAAAJ,cAAA,GAAED,OAAO,CAACK,KAAK,cAAAJ,cAAA,cAAAA,cAAA,GAAIT,kBAAkB;MAC1Cc,MAAM,GAAAJ,eAAA,GAAEF,OAAO,CAACM,MAAM,cAAAJ,eAAA,cAAAA,eAAA,GAAIT;IAC5B,CAAC,CAAC;IAAC,KATLc,OAAO;IAAA,KACPC,QAAQ;IAAA,KACRC,OAAO;IASL,IAAIT,OAAO,CAACS,OAAO,EAAE;MACnBf,MAAM,CAACgB,IAAI,GAAI,GAAEV,OAAO,CAACQ,QAAS,eAAc;MAChD,MAAM;QAAEH;MAAM,CAAC,GAAGX,MAAM,CAACiB,WAAW,CAACX,OAAO,CAACO,OAAO,CAAC;MACrD,IAAI,CAACF,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,MAAM,GAAGN,OAAO,CAACQ,QAAQ;IAChC;IAEA,IAAI,CAACC,OAAO,GAAGT,OAAO,CAACS,OAAO;IAC9B,IAAI,CAACF,OAAO,GAAGP,OAAO,CAACO,OAAO;IAC9B,IAAI,CAACC,QAAQ,GAAGR,OAAO,CAACQ,QAAQ;EAClC;EACAI,QAAQA,CAAA,EAAG;IACT,OAAO;MACL,GAAG,KAAK,CAACA,QAAQ,CAAC,CAAC;MACnBL,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,OAAO,EAAE,IAAI,CAACA;IAChB,CAAC;EACH;EAEAI,0BAA0BA,CAACC,GAA6B,EAAE;IACxD,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjB,MAAMC,EAAE,GAAG,IAAI,CAACC,CAAC,GAAG,IAAI,CAACZ,KAAK,GAAG,CAAC;MAClC,MAAMa,EAAE,GAAG,IAAI,CAACC,CAAC,GAAG,IAAI,CAACb,MAAM,GAAG,CAAC;MAEnClB,cAAc,CAAC0B,GAAG,EAAE,IAAI,CAACC,QAAQ,EAAEC,EAAE,EAAEE,EAAE,CAAC;IAC5C;IACAJ,GAAG,CAACM,SAAS,CAAC,CAAC;IACfN,GAAG,CAACO,YAAY,GAAG,KAAK;IACxBP,GAAG,CAACJ,IAAI,GAAI,GAAE,IAAI,CAACF,QAAS,eAAc;IAE1C,KAAK,MAAMc,OAAO,IAAI,IAAI,CAACC,IAAI,EAAE;MAC/B,QAAQD,OAAO,CAACnB,IAAI;QAClB,KAAKb,WAAW,CAACkC,KAAK;UAAE;YACtBV,GAAG,CAACW,SAAS,GAAGlC,YAAY,CAAC+B,OAAO,CAACI,KAAK,CAAC;YAC3C;UACF;QACA,KAAKpC,WAAW,CAACqC,KAAK;UAAE;YACtB;UAAA;MAEJ;IACF;IACA,IAAI,IAAI,CAACC,MAAM,EAAE;MACf;IAAA;IAGFd,GAAG,CAACe,QAAQ,CAAC,IAAI,CAACtB,OAAO,EAAE,IAAI,CAACU,CAAC,EAAE,IAAI,CAACE,CAAC,CAAC;EAC5C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}