{"ast":null,"code":"import { DOUBLE_PI } from '../../constant';\nimport { GraphType } from '../../type';\nimport { rotateInCanvas } from '../../utils/canvas';\nimport { parseRGBAStr } from '../../utils/color';\nimport { TextureType } from '../texture';\nimport { Graph } from './graph';\nexport class Ellipse extends Graph {\n  constructor(options) {\n    super({\n      ...options,\n      type: GraphType.Ellipse\n    });\n  }\n  renderFillAndStrokeTexture(ctx, smooth) {\n    const cx = this.x + this.width / 2;\n    const cy = this.y + this.height / 2;\n    if (this.rotation) {\n      rotateInCanvas(ctx, this.rotation, cx, cy);\n    }\n    ctx.beginPath();\n    ctx.ellipse(cx, cy, this.width / 2, this.height / 2, 0, 0, DOUBLE_PI);\n    for (const texture of this.fill) {\n      if (texture.type === TextureType.Solid) {\n        ctx.fillStyle = parseRGBAStr(texture.attrs);\n        ctx.fill();\n      } else if (texture.type === TextureType.Image) {\n        ctx.clip();\n        this.fillImage(ctx, texture, smooth);\n      }\n    }\n    if (this.strokeWidth) {\n      ctx.lineWidth = this.strokeWidth;\n      for (const texture of this.stroke) {\n        if (texture.type === TextureType.Solid) {\n          ctx.strokeStyle = parseRGBAStr(texture.attrs);\n          ctx.stroke();\n        } else if (texture.type === TextureType.Image) {\n          // TODO:\n        }\n      }\n    }\n    ctx.closePath();\n  }\n}","map":{"version":3,"names":["DOUBLE_PI","GraphType","rotateInCanvas","parseRGBAStr","TextureType","Graph","Ellipse","constructor","options","type","renderFillAndStrokeTexture","ctx","smooth","cx","x","width","cy","y","height","rotation","beginPath","ellipse","texture","fill","Solid","fillStyle","attrs","Image","clip","fillImage","strokeWidth","lineWidth","stroke","strokeStyle","closePath"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/scene/ellipse.ts"],"sourcesContent":["import { DOUBLE_PI } from '../../constant';\nimport { GraphType } from '../../type';\nimport { rotateInCanvas } from '../../utils/canvas';\nimport { parseRGBAStr } from '../../utils/color';\nimport { TextureType } from '../texture';\nimport { Graph, GraphAttrs } from './graph';\n\nexport type EllipseAttrs = GraphAttrs;\n\nexport class Ellipse extends Graph {\n  constructor(options: EllipseAttrs) {\n    super({ ...options, type: GraphType.Ellipse });\n  }\n  renderFillAndStrokeTexture(\n    ctx: CanvasRenderingContext2D,\n    smooth: boolean,\n  ): void {\n    const cx = this.x + this.width / 2;\n    const cy = this.y + this.height / 2;\n\n    if (this.rotation) {\n      rotateInCanvas(ctx, this.rotation, cx, cy);\n    }\n\n    ctx.beginPath();\n    ctx.ellipse(cx, cy, this.width / 2, this.height / 2, 0, 0, DOUBLE_PI);\n    for (const texture of this.fill) {\n      if (texture.type === TextureType.Solid) {\n        ctx.fillStyle = parseRGBAStr(texture.attrs);\n        ctx.fill();\n      } else if (texture.type === TextureType.Image) {\n        ctx.clip();\n        this.fillImage(ctx, texture, smooth);\n      }\n    }\n\n    if (this.strokeWidth) {\n      ctx.lineWidth = this.strokeWidth;\n      for (const texture of this.stroke) {\n        if (texture.type === TextureType.Solid) {\n          ctx.strokeStyle = parseRGBAStr(texture.attrs);\n          ctx.stroke();\n        } else if (texture.type === TextureType.Image) {\n          // TODO:\n        }\n      }\n    }\n\n    ctx.closePath();\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,KAAK,QAAoB,SAAS;AAI3C,OAAO,MAAMC,OAAO,SAASD,KAAK,CAAC;EACjCE,WAAWA,CAACC,OAAqB,EAAE;IACjC,KAAK,CAAC;MAAE,GAAGA,OAAO;MAAEC,IAAI,EAAER,SAAS,CAACK;IAAQ,CAAC,CAAC;EAChD;EACAI,0BAA0BA,CACxBC,GAA6B,EAC7BC,MAAe,EACT;IACN,MAAMC,EAAE,GAAG,IAAI,CAACC,CAAC,GAAG,IAAI,CAACC,KAAK,GAAG,CAAC;IAClC,MAAMC,EAAE,GAAG,IAAI,CAACC,CAAC,GAAG,IAAI,CAACC,MAAM,GAAG,CAAC;IAEnC,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjBjB,cAAc,CAACS,GAAG,EAAE,IAAI,CAACQ,QAAQ,EAAEN,EAAE,EAAEG,EAAE,CAAC;IAC5C;IAEAL,GAAG,CAACS,SAAS,CAAC,CAAC;IACfT,GAAG,CAACU,OAAO,CAACR,EAAE,EAAEG,EAAE,EAAE,IAAI,CAACD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAElB,SAAS,CAAC;IACrE,KAAK,MAAMsB,OAAO,IAAI,IAAI,CAACC,IAAI,EAAE;MAC/B,IAAID,OAAO,CAACb,IAAI,KAAKL,WAAW,CAACoB,KAAK,EAAE;QACtCb,GAAG,CAACc,SAAS,GAAGtB,YAAY,CAACmB,OAAO,CAACI,KAAK,CAAC;QAC3Cf,GAAG,CAACY,IAAI,CAAC,CAAC;MACZ,CAAC,MAAM,IAAID,OAAO,CAACb,IAAI,KAAKL,WAAW,CAACuB,KAAK,EAAE;QAC7ChB,GAAG,CAACiB,IAAI,CAAC,CAAC;QACV,IAAI,CAACC,SAAS,CAAClB,GAAG,EAAEW,OAAO,EAAEV,MAAM,CAAC;MACtC;IACF;IAEA,IAAI,IAAI,CAACkB,WAAW,EAAE;MACpBnB,GAAG,CAACoB,SAAS,GAAG,IAAI,CAACD,WAAW;MAChC,KAAK,MAAMR,OAAO,IAAI,IAAI,CAACU,MAAM,EAAE;QACjC,IAAIV,OAAO,CAACb,IAAI,KAAKL,WAAW,CAACoB,KAAK,EAAE;UACtCb,GAAG,CAACsB,WAAW,GAAG9B,YAAY,CAACmB,OAAO,CAACI,KAAK,CAAC;UAC7Cf,GAAG,CAACqB,MAAM,CAAC,CAAC;QACd,CAAC,MAAM,IAAIV,OAAO,CAACb,IAAI,KAAKL,WAAW,CAACuB,KAAK,EAAE;UAC7C;QAAA;MAEJ;IACF;IAEAhB,GAAG,CAACuB,SAAS,CAAC,CAAC;EACjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}