{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { isFunction } from '../utils';\nconst useSetState = initialState => {\n  const [state, setState] = useState(initialState);\n  const setMergeState = useCallback(patch => {\n    setState(prevState => {\n      const newState = isFunction(patch) ? patch(prevState) : patch;\n      return newState ? Object.assign(Object.assign({}, prevState), newState) : prevState;\n    });\n  }, []);\n  return [state, setMergeState];\n};\nexport default useSetState;","map":{"version":3,"names":["useCallback","useState","isFunction","useSetState","initialState","state","setState","setMergeState","patch","prevState","newState","Object","assign"],"sources":["/Users/yangdan/zf-workspace/react/suika/node_modules/.pnpm/registry.npmmirror.com+ahooks@3.7.4_react@18.2.0/node_modules/ahooks/es/useSetState/index.js"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport { isFunction } from '../utils';\nconst useSetState = initialState => {\n  const [state, setState] = useState(initialState);\n  const setMergeState = useCallback(patch => {\n    setState(prevState => {\n      const newState = isFunction(patch) ? patch(prevState) : patch;\n      return newState ? Object.assign(Object.assign({}, prevState), newState) : prevState;\n    });\n  }, []);\n  return [state, setMergeState];\n};\nexport default useSetState;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,UAAU;AACrC,MAAMC,WAAW,GAAGC,YAAY,IAAI;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAACG,YAAY,CAAC;EAChD,MAAMG,aAAa,GAAGP,WAAW,CAACQ,KAAK,IAAI;IACzCF,QAAQ,CAACG,SAAS,IAAI;MACpB,MAAMC,QAAQ,GAAGR,UAAU,CAACM,KAAK,CAAC,GAAGA,KAAK,CAACC,SAAS,CAAC,GAAGD,KAAK;MAC7D,OAAOE,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,SAAS,CAAC,EAAEC,QAAQ,CAAC,GAAGD,SAAS;IACrF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACJ,KAAK,EAAEE,aAAa,CAAC;AAC/B,CAAC;AACD,eAAeJ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}