{"ast":null,"code":"import hotkeys from 'hotkeys-js';\nimport { getClosestTimesVal } from '../../../utils/common';\nimport { calcVectorRadian, getRectCenterPoint, normalizeRadian } from '../../../utils/graphics';\nimport { transformRotate } from '../../../utils/transform';\nimport { SetElementsAttrs } from '../../commands/set_elements_attrs';\n/**\n * 选中工具的\n * 旋转元素场景\n */\nexport class SelectRotationTool {\n  constructor(editor) {\n    this.editor = editor;\n    this.lastPoint = null;\n    this.dRotation = 0;\n    // 按下，然后释放的整个过程中，产生的相对角度\n    this.selectedElementsBBoxCenter = null;\n    this.prevRotations = [];\n    this.prevElementXYs = [];\n    this.prevElementCenters = [];\n    this.prevElementHalfSizes = [];\n    this.shiftPressHandler = () => {\n      if (hotkeys.shift) {\n        this.rotateSelectedElements();\n      }\n    };\n  }\n  active() {\n    hotkeys('*', {\n      keydown: true,\n      keyup: true\n    }, this.shiftPressHandler);\n  }\n  inactive() {\n    hotkeys.unbind('*', this.shiftPressHandler);\n  }\n  start() {\n    this.lastPoint = null;\n    this.dRotation = 0;\n    const selectedElements = this.editor.selectedElements.getItems();\n    this.prevRotations = [];\n    this.prevElementCenters = [];\n    this.prevElementHalfSizes = [];\n    // 记录旋转前所有元素的（1）旋转值、（2）中点、（3）宽高 / 2\n    for (let i = 0, len = selectedElements.length; i < len; i++) {\n      const el = selectedElements[i];\n      this.prevRotations[i] = el.rotation || 0;\n      const bBox = el.getBBoxWithoutRotation();\n      this.prevElementXYs[i] = [bBox.x, bBox.y];\n      this.prevElementCenters[i] = getRectCenterPoint(bBox);\n      this.prevElementHalfSizes[i] = [bBox.width / 2, bBox.height / 2];\n    }\n\n    // 记录组合包围盒的中心点\n    const selectedElementsBBox = this.editor.selectedElements.getBBox();\n    this.selectedElementsBBoxCenter = selectedElementsBBox ? getRectCenterPoint(selectedElementsBBox) : null;\n  }\n  drag(e) {\n    this.lastPoint = this.editor.getSceneCursorXY(e);\n    this.rotateSelectedElements();\n  }\n  rotateSelectedElements() {\n    const lastPoint = this.lastPoint;\n    if (!lastPoint) return;\n    const selectedElements = this.editor.selectedElements.getItems();\n    /**** 旋转单个元素 ****/\n    if (selectedElements.length === 1) {\n      const element = selectedElements[0];\n      const {\n        x,\n        y,\n        width,\n        height\n      } = element;\n      const cx = x + width / 2;\n      const cy = y + height / 2;\n\n      // 计算向量夹角\n      // https://blog.fstars.wang/posts/calc-vector-angle/\n      let dRotation = calcVectorRadian(cx, cy, lastPoint.x, lastPoint.y);\n      if (this.editor.hostEventManager.isShiftPressing) {\n        const lockRotation = this.editor.setting.get('lockRotation');\n        dRotation = getClosestTimesVal(dRotation, lockRotation);\n      }\n      this.dRotation = dRotation;\n      element.rotation = dRotation;\n    } else if (selectedElements.length > 1) {\n      /**** 旋转多个元素 ****/\n      const selectedElementsBBox = this.editor.selectedElements.getBBox();\n      if (selectedElementsBBox) {\n        const [cxInSelectedElementsBBox, cyInSelectedElementsBBox] = this.selectedElementsBBoxCenter;\n        let dRotation = calcVectorRadian(cxInSelectedElementsBBox, cyInSelectedElementsBBox, lastPoint.x, lastPoint.y);\n        if (this.editor.hostEventManager.isShiftPressing) {\n          const lockRotation = this.editor.setting.get('lockRotation');\n          dRotation = getClosestTimesVal(dRotation, lockRotation);\n        }\n        this.dRotation = dRotation;\n        const prevElementCenters = this.prevElementCenters;\n        const prevElementHalfSizes = this.prevElementHalfSizes;\n        for (let i = 0, len = selectedElements.length; i < len; i++) {\n          const el = selectedElements[i];\n          // 计算新的旋转角度\n          el.rotation = normalizeRadian(this.prevRotations[i] + dRotation);\n          const [cx, cy] = prevElementCenters[i];\n          const {\n            x: newCx,\n            y: newCy\n          } = transformRotate(cx, cy, dRotation, cxInSelectedElementsBBox, cyInSelectedElementsBBox);\n          const x = newCx - prevElementHalfSizes[i][0];\n          const y = newCy - prevElementHalfSizes[i][1];\n          el.x = x;\n          el.y = y;\n        }\n      }\n    } else {\n      throw new Error('不存在选中的元素，请给我们提 issue');\n    }\n    this.editor.sceneGraph.render();\n  }\n  end() {\n    const selectedElements = this.editor.selectedElements.getItems();\n    const commandDesc = 'Rotate Elements';\n    if (this.dRotation !== 0) {\n      if (selectedElements.length === 0) {\n        this.editor.commandManager.pushCommand(new SetElementsAttrs(commandDesc, selectedElements, {\n          rotation: this.dRotation\n        }, this.prevRotations.map(rotation => ({\n          rotation\n        }))));\n      } else {\n        this.editor.commandManager.pushCommand(new SetElementsAttrs(commandDesc, selectedElements, selectedElements.map(el => ({\n          rotation: el.rotation,\n          x: el.x,\n          y: el.y\n        })), this.prevRotations.map((rotation, index) => ({\n          rotation,\n          x: this.prevElementXYs[index][0],\n          y: this.prevElementXYs[index][1]\n        }))));\n      }\n      // TODO: 多选的历史记录实现\n    }\n  }\n\n  afterEnd() {\n    // do nothing\n  }\n}","map":{"version":3,"names":["hotkeys","getClosestTimesVal","calcVectorRadian","getRectCenterPoint","normalizeRadian","transformRotate","SetElementsAttrs","SelectRotationTool","constructor","editor","lastPoint","dRotation","selectedElementsBBoxCenter","prevRotations","prevElementXYs","prevElementCenters","prevElementHalfSizes","shiftPressHandler","shift","rotateSelectedElements","active","keydown","keyup","inactive","unbind","start","selectedElements","getItems","i","len","length","el","rotation","bBox","getBBoxWithoutRotation","x","y","width","height","selectedElementsBBox","getBBox","drag","e","getSceneCursorXY","element","cx","cy","hostEventManager","isShiftPressing","lockRotation","setting","get","cxInSelectedElementsBBox","cyInSelectedElementsBBox","newCx","newCy","Error","sceneGraph","render","end","commandDesc","commandManager","pushCommand","map","index","afterEnd"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/tools/tool_select/tool_select_rotation.ts"],"sourcesContent":["import hotkeys from 'hotkeys-js';\nimport { IPoint } from '../../../type';\nimport { getClosestTimesVal } from '../../../utils/common';\nimport {\n  calcVectorRadian,\n  getRectCenterPoint,\n  normalizeRadian,\n} from '../../../utils/graphics';\nimport { transformRotate } from '../../../utils/transform';\nimport { SetElementsAttrs } from '../../commands/set_elements_attrs';\nimport { Editor } from '../../editor';\nimport { IBaseTool } from '../type';\n\n/**\n * 选中工具的\n * 旋转元素场景\n */\nexport class SelectRotationTool implements IBaseTool {\n  private lastPoint: IPoint | null = null;\n  private dRotation = 0; // 按下，然后释放的整个过程中，产生的相对角度\n\n  private selectedElementsBBoxCenter: [x: number, y: number] | null = null;\n  private prevRotations: number[] = [];\n  private prevElementXYs: [x: number, y: number][] = [];\n  private prevElementCenters: [x: number, y: number][] = [];\n  private prevElementHalfSizes: [width: number, height: number][] = [];\n\n  private shiftPressHandler = () => {\n    if (hotkeys.shift) {\n      this.rotateSelectedElements();\n    }\n  };\n\n  constructor(private editor: Editor) {}\n\n  active() {\n    hotkeys('*', { keydown: true, keyup: true }, this.shiftPressHandler);\n  }\n  inactive() {\n    hotkeys.unbind('*', this.shiftPressHandler);\n  }\n  start() {\n    this.lastPoint = null;\n    this.dRotation = 0;\n\n    const selectedElements = this.editor.selectedElements.getItems();\n\n    this.prevRotations = [];\n    this.prevElementCenters = [];\n    this.prevElementHalfSizes = [];\n    // 记录旋转前所有元素的（1）旋转值、（2）中点、（3）宽高 / 2\n    for (let i = 0, len = selectedElements.length; i < len; i++) {\n      const el = selectedElements[i];\n      this.prevRotations[i] = el.rotation || 0;\n      const bBox = el.getBBoxWithoutRotation();\n      this.prevElementXYs[i] = [bBox.x, bBox.y];\n      this.prevElementCenters[i] = getRectCenterPoint(bBox);\n      this.prevElementHalfSizes[i] = [bBox.width / 2, bBox.height / 2];\n    }\n\n    // 记录组合包围盒的中心点\n    const selectedElementsBBox = this.editor.selectedElements.getBBox();\n    this.selectedElementsBBoxCenter = selectedElementsBBox\n      ? getRectCenterPoint(selectedElementsBBox)\n      : null;\n  }\n  drag(e: PointerEvent) {\n    this.lastPoint = this.editor.getSceneCursorXY(e);\n    this.rotateSelectedElements();\n  }\n  private rotateSelectedElements() {\n    const lastPoint = this.lastPoint;\n    if (!lastPoint) return;\n\n    const selectedElements = this.editor.selectedElements.getItems();\n    /**** 旋转单个元素 ****/\n    if (selectedElements.length === 1) {\n      const element = selectedElements[0];\n      const { x, y, width, height } = element;\n      const cx = x + width / 2;\n      const cy = y + height / 2;\n\n      // 计算向量夹角\n      // https://blog.fstars.wang/posts/calc-vector-angle/\n      let dRotation = calcVectorRadian(cx, cy, lastPoint.x, lastPoint.y);\n      if (this.editor.hostEventManager.isShiftPressing) {\n        const lockRotation = this.editor.setting.get('lockRotation');\n        dRotation = getClosestTimesVal(dRotation, lockRotation);\n      }\n      this.dRotation = dRotation;\n\n      element.rotation = dRotation;\n    } else if (selectedElements.length > 1) {\n      /**** 旋转多个元素 ****/\n      const selectedElementsBBox = this.editor.selectedElements.getBBox();\n      if (selectedElementsBBox) {\n        const [cxInSelectedElementsBBox, cyInSelectedElementsBBox] = this\n          .selectedElementsBBoxCenter as [number, number];\n\n        let dRotation = calcVectorRadian(\n          cxInSelectedElementsBBox,\n          cyInSelectedElementsBBox,\n          lastPoint.x,\n          lastPoint.y,\n        );\n        if (this.editor.hostEventManager.isShiftPressing) {\n          const lockRotation = this.editor.setting.get('lockRotation');\n          dRotation = getClosestTimesVal(dRotation, lockRotation);\n        }\n        this.dRotation = dRotation;\n\n        const prevElementCenters = this.prevElementCenters;\n        const prevElementHalfSizes = this.prevElementHalfSizes;\n        for (let i = 0, len = selectedElements.length; i < len; i++) {\n          const el = selectedElements[i];\n          // 计算新的旋转角度\n          el.rotation = normalizeRadian(this.prevRotations[i] + dRotation);\n\n          const [cx, cy] = prevElementCenters[i];\n          const { x: newCx, y: newCy } = transformRotate(\n            cx,\n            cy,\n            dRotation,\n            cxInSelectedElementsBBox,\n            cyInSelectedElementsBBox,\n          );\n\n          const x = newCx - prevElementHalfSizes[i][0];\n          const y = newCy - prevElementHalfSizes[i][1];\n\n          el.x = x;\n          el.y = y;\n        }\n      }\n    } else {\n      throw new Error('不存在选中的元素，请给我们提 issue');\n    }\n    this.editor.sceneGraph.render();\n  }\n  end() {\n    const selectedElements = this.editor.selectedElements.getItems();\n    const commandDesc = 'Rotate Elements';\n    if (this.dRotation !== 0) {\n      if (selectedElements.length === 0) {\n        this.editor.commandManager.pushCommand(\n          new SetElementsAttrs(\n            commandDesc,\n            selectedElements,\n            {\n              rotation: this.dRotation,\n            },\n            this.prevRotations.map((rotation) => ({ rotation })),\n          ),\n        );\n      } else {\n        this.editor.commandManager.pushCommand(\n          new SetElementsAttrs(\n            commandDesc,\n            selectedElements,\n            selectedElements.map((el) => ({\n              rotation: el.rotation,\n              x: el.x,\n              y: el.y,\n            })),\n            this.prevRotations.map((rotation, index) => ({\n              rotation,\n              x: this.prevElementXYs[index][0],\n              y: this.prevElementXYs[index][1],\n            })),\n          ),\n        );\n      }\n      // TODO: 多选的历史记录实现\n    }\n  }\n  afterEnd() {\n    // do nothing\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}