{"ast":null,"code":"/**\n * a c e\n * b d f\n * 0 0 1\n */\n\nexport function transform({\n  x,\n  y\n}, [a, b, c, d, e, f]) {\n  return {\n    x: x * a + y * c + e,\n    y: x * b + y * d + f\n  };\n}\n\n/**\n * rotate\n */\nexport function transformRotate(x, y, radian, cx, cy) {\n  if (!radian) {\n    return {\n      x,\n      y\n    };\n  }\n  const cos = Math.cos(radian);\n  const sin = Math.sin(radian);\n  return {\n    x: (x - cx) * cos - (y - cy) * sin + cx,\n    y: (x - cx) * sin + (y - cy) * cos + cy\n  };\n}\n\n/**\n * 【目前没有使用】\n * 计算旋转前的 x、y\n * transformRotate 的反推\n */\nexport function getOriginXY(rotatedX, rotatedY, radian, width, height) {\n  if (!radian) {\n    return [rotatedX, rotatedY];\n  }\n  const cos = Math.cos(radian);\n  const sin = Math.sin(radian);\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n  return [rotatedX - halfWidth - halfHeight * sin + halfWidth * cos, rotatedY - halfHeight + halfHeight * cos + halfWidth * sin];\n}","map":{"version":3,"names":["transform","x","y","a","b","c","d","e","f","transformRotate","radian","cx","cy","cos","Math","sin","getOriginXY","rotatedX","rotatedY","width","height","halfWidth","halfHeight"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/utils/transform.ts"],"sourcesContent":["interface IVector {\n  x: number;\n  y: number;\n}\n\n/**\n * a c e\n * b d f\n * 0 0 1\n */\ntype IMatrix = [\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n];\n\nexport function transform(\n  { x, y }: IVector,\n  [a, b, c, d, e, f]: IMatrix,\n): IVector {\n  return {\n    x: x * a + y * c + e,\n    y: x * b + y * d + f,\n  };\n}\n\n/**\n * rotate\n */\nexport function transformRotate(\n  x: number,\n  y: number,\n  radian: number,\n  cx: number,\n  cy: number,\n): { x: number; y: number } {\n  if (!radian) {\n    return { x, y };\n  }\n  const cos = Math.cos(radian);\n  const sin = Math.sin(radian);\n  return {\n    x: (x - cx) * cos - (y - cy) * sin + cx,\n    y: (x - cx) * sin + (y - cy) * cos + cy,\n  };\n}\n\n/**\n * 【目前没有使用】\n * 计算旋转前的 x、y\n * transformRotate 的反推\n */\nexport function getOriginXY(\n  rotatedX: number,\n  rotatedY: number,\n  radian: number,\n  width: number,\n  height: number,\n): [rotatedX: number, rotatedY: number] {\n  if (!radian) {\n    return [rotatedX, rotatedY];\n  }\n  const cos = Math.cos(radian);\n  const sin = Math.sin(radian);\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n  return [\n    rotatedX - halfWidth - halfHeight * sin + halfWidth * cos,\n    rotatedY - halfHeight + halfHeight * cos + halfWidth * sin,\n  ];\n}\n"],"mappings":"AAKA;AACA;AACA;AACA;AACA;;AAUA,OAAO,SAASA,SAASA,CACvB;EAAEC,CAAC;EAAEC;AAAW,CAAC,EACjB,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAU,EAClB;EACT,OAAO;IACLP,CAAC,EAAEA,CAAC,GAAGE,CAAC,GAAGD,CAAC,GAAGG,CAAC,GAAGE,CAAC;IACpBL,CAAC,EAAED,CAAC,GAAGG,CAAC,GAAGF,CAAC,GAAGI,CAAC,GAAGE;EACrB,CAAC;AACH;;AAEA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAC7BR,CAAS,EACTC,CAAS,EACTQ,MAAc,EACdC,EAAU,EACVC,EAAU,EACgB;EAC1B,IAAI,CAACF,MAAM,EAAE;IACX,OAAO;MAAET,CAAC;MAAEC;IAAE,CAAC;EACjB;EACA,MAAMW,GAAG,GAAGC,IAAI,CAACD,GAAG,CAACH,MAAM,CAAC;EAC5B,MAAMK,GAAG,GAAGD,IAAI,CAACC,GAAG,CAACL,MAAM,CAAC;EAC5B,OAAO;IACLT,CAAC,EAAE,CAACA,CAAC,GAAGU,EAAE,IAAIE,GAAG,GAAG,CAACX,CAAC,GAAGU,EAAE,IAAIG,GAAG,GAAGJ,EAAE;IACvCT,CAAC,EAAE,CAACD,CAAC,GAAGU,EAAE,IAAII,GAAG,GAAG,CAACb,CAAC,GAAGU,EAAE,IAAIC,GAAG,GAAGD;EACvC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,WAAWA,CACzBC,QAAgB,EAChBC,QAAgB,EAChBR,MAAc,EACdS,KAAa,EACbC,MAAc,EACwB;EACtC,IAAI,CAACV,MAAM,EAAE;IACX,OAAO,CAACO,QAAQ,EAAEC,QAAQ,CAAC;EAC7B;EACA,MAAML,GAAG,GAAGC,IAAI,CAACD,GAAG,CAACH,MAAM,CAAC;EAC5B,MAAMK,GAAG,GAAGD,IAAI,CAACC,GAAG,CAACL,MAAM,CAAC;EAC5B,MAAMW,SAAS,GAAGF,KAAK,GAAG,CAAC;EAC3B,MAAMG,UAAU,GAAGF,MAAM,GAAG,CAAC;EAC7B,OAAO,CACLH,QAAQ,GAAGI,SAAS,GAAGC,UAAU,GAAGP,GAAG,GAAGM,SAAS,GAAGR,GAAG,EACzDK,QAAQ,GAAGI,UAAU,GAAGA,UAAU,GAAGT,GAAG,GAAGQ,SAAS,GAAGN,GAAG,CAC3D;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}