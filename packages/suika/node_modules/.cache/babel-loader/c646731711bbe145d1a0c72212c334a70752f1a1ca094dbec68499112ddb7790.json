{"ast":null,"code":"import { getDevicePixelRatio } from '../utils/common';\nimport EventEmitter from '../utils/event_emitter';\nexport class ViewportManager {\n  constructor(editor) {\n    this.editor = editor;\n    this.scrollX = 0;\n    this.scrollY = 0;\n    this.eventEmitter = new EventEmitter();\n  }\n  getViewport() {\n    return {\n      x: this.scrollX,\n      y: this.scrollY,\n      width: parseFloat(this.editor.canvasElement.style.width),\n      height: parseFloat(this.editor.canvasElement.style.height)\n    };\n  }\n  setViewport({\n    x,\n    y,\n    width,\n    height\n  }) {\n    const prevX = this.scrollX;\n    const prevY = this.scrollY;\n    const dpr = getDevicePixelRatio();\n    if (x !== undefined) {\n      this.scrollX = x;\n    }\n    if (y !== undefined) {\n      this.scrollY = y;\n    }\n    if (width !== undefined) {\n      this.editor.canvasElement.width = width * dpr;\n      this.editor.canvasElement.style.width = width + 'px';\n    }\n    if (height !== undefined) {\n      this.editor.canvasElement.height = height * dpr;\n      this.editor.canvasElement.style.height = height + 'px';\n    }\n    if (prevX !== x || prevY !== y) {\n      this.eventEmitter.emit('xOrYChange', x, y);\n    }\n  }\n  getCenter() {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    return {\n      x: x + width / 2 / zoom,\n      y: y + height / 2 / zoom\n    };\n  }\n  translate(dx, dy) {\n    this.scrollX += dx;\n    this.scrollY += dy;\n    this.eventEmitter.emit('xOrYChange', this.scrollX, this.scrollY);\n  }\n  getBbox() {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    return {\n      x: x,\n      y: y,\n      width: width / zoom,\n      height: height / zoom\n    };\n  }\n  getBbox2() {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    return {\n      minX: x,\n      minY: y,\n      maxX: x + width / zoom,\n      maxY: y + height / zoom\n    };\n  }\n  on(eventName, handler) {\n    this.eventEmitter.on(eventName, handler);\n  }\n  off(eventName, handler) {\n    this.eventEmitter.off(eventName, handler);\n  }\n}","map":{"version":3,"names":["getDevicePixelRatio","EventEmitter","ViewportManager","constructor","editor","scrollX","scrollY","eventEmitter","getViewport","x","y","width","parseFloat","canvasElement","style","height","setViewport","prevX","prevY","dpr","undefined","emit","getCenter","zoom","zoomManager","getZoom","translate","dx","dy","getBbox","getBbox2","minX","minY","maxX","maxY","on","eventName","handler","off"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/viewport_manager.ts"],"sourcesContent":["import { IBox, IBox2 } from '../type';\nimport { getDevicePixelRatio } from '../utils/common';\nimport EventEmitter from '../utils/event_emitter';\nimport { Editor } from './editor';\n\ninterface Events {\n  xOrYChange(x: number | undefined, y: number): void;\n}\n\nexport class ViewportManager {\n  private scrollX = 0;\n  private scrollY = 0;\n  private eventEmitter = new EventEmitter<Events>();\n\n  constructor(private editor: Editor) {}\n  getViewport(): IBox {\n    return {\n      x: this.scrollX,\n      y: this.scrollY,\n      width: parseFloat(this.editor.canvasElement.style.width),\n      height: parseFloat(this.editor.canvasElement.style.height),\n    };\n  }\n  setViewport({ x, y, width, height }: Partial<IBox>) {\n    const prevX = this.scrollX;\n    const prevY = this.scrollY;\n    const dpr = getDevicePixelRatio();\n    if (x !== undefined) {\n      this.scrollX = x;\n    }\n    if (y !== undefined) {\n      this.scrollY = y;\n    }\n    if (width !== undefined) {\n      this.editor.canvasElement.width = width * dpr;\n      this.editor.canvasElement.style.width = width + 'px';\n    }\n    if (height !== undefined) {\n      this.editor.canvasElement.height = height * dpr;\n      this.editor.canvasElement.style.height = height + 'px';\n    }\n\n    if (prevX !== x || prevY !== y) {\n      this.eventEmitter.emit('xOrYChange', x as number, y as number);\n    }\n  }\n  getCenter() {\n    const { x, y, width, height } = this.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    return {\n      x: x + width / 2 / zoom,\n      y: y + height / 2 / zoom,\n    };\n  }\n  translate(dx: number, dy: number) {\n    this.scrollX += dx;\n    this.scrollY += dy;\n    this.eventEmitter.emit('xOrYChange', this.scrollX, this.scrollY);\n  }\n  getBbox(): IBox {\n    const { x, y, width, height } = this.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    return {\n      x: x,\n      y: y,\n      width: width / zoom,\n      height: height / zoom,\n    };\n  }\n  getBbox2(): IBox2 {\n    const { x, y, width, height } = this.getViewport();\n    const zoom = this.editor.zoomManager.getZoom();\n    return {\n      minX: x,\n      minY: y,\n      maxX: x + width / zoom,\n      maxY: y + height / zoom,\n    };\n  }\n  on(eventName: 'xOrYChange', handler: (x: number, y: number) => void) {\n    this.eventEmitter.on(eventName, handler);\n  }\n  off(eventName: 'xOrYChange', handler: (x: number, y: number) => void) {\n    this.eventEmitter.off(eventName, handler);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}