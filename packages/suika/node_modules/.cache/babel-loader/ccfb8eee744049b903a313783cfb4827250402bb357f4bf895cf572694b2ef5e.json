{"ast":null,"code":"var _jsxFileName = \"/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/InfoPanel/InfoPanel.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from 'react';\nimport { EditorContext } from '../../context';\nimport { AlignCard } from '../Cards/AlignCard';\nimport ElementsInfoCards from '../Cards/ElementsInfoCard';\nimport { FillCard } from '../Cards/FillCard';\nimport './style.scss';\nimport { FormattedMessage } from 'react-intl';\nimport { StrokeCard } from '../Cards/StrokeCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar PanelType = /*#__PURE__*/function (PanelType) {\n  PanelType[\"Global\"] = \"Global\";\n  PanelType[\"SelectedElements\"] = \"SelectedElements\";\n  return PanelType;\n}(PanelType || {});\nexport const InfoPanel = () => {\n  _s();\n  const editor = useContext(EditorContext);\n  const [type, setType] = useState(PanelType.Global);\n  // 根据是否选中元素，来决定面板类型\n\n  useEffect(() => {\n    if (editor) {\n      const handler = items => {\n        setType(items.length ? PanelType.SelectedElements : PanelType.Global);\n      };\n      editor.selectedElements.on('itemsChange', handler);\n      return () => {\n        editor.selectedElements.off('itemsChange', handler);\n      };\n    }\n  }, [editor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"info-panel\",\n    onKeyDown: e => e.stopPropagation(),\n    children: [type === PanelType.SelectedElements && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AlignCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ElementsInfoCards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FillCard, {}, \"fill\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StrokeCard, {}, \"stroke\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), type === PanelType.Global && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-text\",\n      children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n        id: \"noSelectedShapes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(InfoPanel, \"om+2aai5QAQIDJsfJVEzwjt++Ng=\");\n_c = InfoPanel;\nvar _c;\n$RefreshReg$(_c, \"InfoPanel\");","map":{"version":3,"names":["useContext","useEffect","useState","EditorContext","AlignCard","ElementsInfoCards","FillCard","FormattedMessage","StrokeCard","jsxDEV","_jsxDEV","Fragment","_Fragment","PanelType","InfoPanel","_s","editor","type","setType","Global","handler","items","length","SelectedElements","selectedElements","on","off","className","onKeyDown","e","stopPropagation","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/InfoPanel/InfoPanel.tsx"],"sourcesContent":["import { FC, useContext, useEffect, useState } from 'react';\nimport { EditorContext } from '../../context';\nimport { GraphAttrs } from '../../editor/scene/graph';\nimport { AlignCard } from '../Cards/AlignCard';\nimport ElementsInfoCards from '../Cards/ElementsInfoCard';\nimport { FillCard } from '../Cards/FillCard';\nimport './style.scss';\nimport { FormattedMessage } from 'react-intl';\nimport { StrokeCard } from '../Cards/StrokeCard';\n\nenum PanelType {\n  Global = 'Global',\n  SelectedElements = 'SelectedElements',\n}\n\nexport const InfoPanel: FC = () => {\n  const editor = useContext(EditorContext);\n  const [type, setType] = useState(PanelType.Global);\n  // 根据是否选中元素，来决定面板类型\n\n  useEffect(() => {\n    if (editor) {\n      const handler = (items: GraphAttrs[]) => {\n        setType(items.length ? PanelType.SelectedElements : PanelType.Global);\n      };\n      editor.selectedElements.on('itemsChange', handler);\n\n      return () => {\n        editor.selectedElements.off('itemsChange', handler);\n      };\n    }\n  }, [editor]);\n\n  return (\n    <div className=\"info-panel\" onKeyDown={(e) => e.stopPropagation()}>\n      {type === PanelType.SelectedElements && (\n        <>\n          <AlignCard />\n          <ElementsInfoCards />\n          <FillCard key=\"fill\" />\n          <StrokeCard key=\"stroke\" />\n        </>\n      )}\n      {type === PanelType.Global && (\n        <div className=\"empty-text\">\n          <FormattedMessage id=\"noSelectedShapes\" />\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAAaA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,aAAa,QAAQ,eAAe;AAE7C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAO,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,SAASC,UAAU,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,IAE5CC,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA,EAATA,SAAS;AAKd,OAAO,MAAMC,SAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,MAAM,GAAGhB,UAAU,CAACG,aAAa,CAAC;EACxC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACW,SAAS,CAACM,MAAM,CAAC;EAClD;;EAEAlB,SAAS,CAAC,MAAM;IACd,IAAIe,MAAM,EAAE;MACV,MAAMI,OAAO,GAAIC,KAAmB,IAAK;QACvCH,OAAO,CAACG,KAAK,CAACC,MAAM,GAAGT,SAAS,CAACU,gBAAgB,GAAGV,SAAS,CAACM,MAAM,CAAC;MACvE,CAAC;MACDH,MAAM,CAACQ,gBAAgB,CAACC,EAAE,CAAC,aAAa,EAAEL,OAAO,CAAC;MAElD,OAAO,MAAM;QACXJ,MAAM,CAACQ,gBAAgB,CAACE,GAAG,CAAC,aAAa,EAAEN,OAAO,CAAC;MACrD,CAAC;IACH;EACF,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,oBACEN,OAAA;IAAKiB,SAAS,EAAC,YAAY;IAACC,SAAS,EAAGC,CAAC,IAAKA,CAAC,CAACC,eAAe,CAAC,CAAE;IAAAC,QAAA,GAC/Dd,IAAI,KAAKJ,SAAS,CAACU,gBAAgB,iBAClCb,OAAA,CAAAE,SAAA;MAAAmB,QAAA,gBACErB,OAAA,CAACN,SAAS;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACbzB,OAAA,CAACL,iBAAiB;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrBzB,OAAA,CAACJ,QAAQ,MAAK,MAAM;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvBzB,OAAA,CAACF,UAAU,MAAK,QAAQ;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC3B,CACH,EACAlB,IAAI,KAAKJ,SAAS,CAACM,MAAM,iBACxBT,OAAA;MAAKiB,SAAS,EAAC,YAAY;MAAAI,QAAA,eACzBrB,OAAA,CAACH,gBAAgB;QAAC6B,EAAE,EAAC;MAAkB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CAnCWD,SAAa;AAAAuB,EAAA,GAAbvB,SAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}