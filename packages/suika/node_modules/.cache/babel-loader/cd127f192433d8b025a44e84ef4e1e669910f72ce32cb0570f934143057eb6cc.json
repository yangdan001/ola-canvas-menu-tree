{"ast":null,"code":"import { isWindows } from '../utils/common';\nconst getKeyStr = e => {\n  const {\n    ctrlKey = false,\n    shiftKey = false,\n    altKey = false,\n    metaKey = false\n  } = e;\n  return `${ctrlKey ? 'ctrl+' : ''}${metaKey ? 'meta+' : ''}${shiftKey ? 'shift+' : ''}${altKey ? 'alt+' : ''}${e.code}`;\n};\n\n/**\n * key binding manager\n */\nexport class KeyBindingManager {\n  constructor(editor) {\n    this.editor = editor;\n    this.keyBindingMap = new Map();\n    this.isBound = false;\n    this.id = 0;\n    this.handleAction = e => {\n      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n      let isMatch = false;\n      const ctx = {\n        isToolDragging: this.editor.toolManager.isDragging\n      };\n      for (const keyBinding of this.keyBindingMap.values()) {\n        // match when\n        if (!keyBinding.when || keyBinding.when(ctx)) {\n          // match windows os\n          if (isWindows && keyBinding.winKey) {\n            if (this.isKeyMatch(keyBinding.winKey, e)) {\n              isMatch = true;\n            }\n          }\n          // match other os\n          else if (this.isKeyMatch(keyBinding.key, e)) {\n            isMatch = true;\n          }\n        }\n        if (isMatch) {\n          e.preventDefault();\n          console.log(`[${getKeyStr(e)}] => ${keyBinding.actionName}`);\n          keyBinding.action(e);\n          break;\n        }\n      }\n      if (!isMatch) {\n        console.log(`[${getKeyStr(e)}] => no match`);\n      }\n    };\n  }\n  isKeyMatch(key, e) {\n    if (Array.isArray(key)) {\n      return key.some(k => this.isKeyMatch(k, e));\n    }\n    if (key.keyCode == '*') return true;\n    const {\n      ctrlKey = false,\n      shiftKey = false,\n      altKey = false,\n      metaKey = false\n    } = key;\n    return ctrlKey == e.ctrlKey && shiftKey == e.shiftKey && altKey == e.altKey && metaKey == e.metaKey && key.keyCode == e.code;\n  }\n  register(keybinding) {\n    const id = this.id;\n    this.keyBindingMap.set(id, keybinding);\n    this.id++;\n    return id;\n  }\n  registerWithHighPrior(keybinding) {\n    const id = this.id;\n    const map = new Map();\n    map.set(id, keybinding);\n    for (const [key, val] of this.keyBindingMap) {\n      map.set(key, val);\n    }\n    this.keyBindingMap = map;\n    this.id++;\n    return id;\n  }\n  unregister(id) {\n    this.keyBindingMap.delete(id);\n  }\n  bindEvent() {\n    if (this.isBound) return;\n    this.isBound = true;\n    document.addEventListener('keydown', this.handleAction);\n  }\n  destroy() {\n    if (!this.isBound) return;\n    this.keyBindingMap.clear();\n    document.removeEventListener('keydown', this.handleAction);\n  }\n}","map":{"version":3,"names":["isWindows","getKeyStr","e","ctrlKey","shiftKey","altKey","metaKey","code","KeyBindingManager","constructor","editor","keyBindingMap","Map","isBound","id","handleAction","target","HTMLInputElement","HTMLTextAreaElement","isMatch","ctx","isToolDragging","toolManager","isDragging","keyBinding","values","when","winKey","isKeyMatch","key","preventDefault","console","log","actionName","action","Array","isArray","some","k","keyCode","register","keybinding","set","registerWithHighPrior","map","val","unregister","delete","bindEvent","document","addEventListener","destroy","clear","removeEventListener"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/key_binding_manager.ts"],"sourcesContent":["import { isWindows } from '../utils/common';\nimport { Editor } from './editor';\n\ninterface IKey {\n  ctrlKey?: boolean;\n  shiftKey?: boolean;\n  altKey?: boolean;\n  metaKey?: boolean;\n  /**\n   * KeyboardEvent['code'] or '*'(match any key)\n   */\n  keyCode: string;\n}\n\ninterface IWhenCtx {\n  isToolDragging: boolean;\n}\n\ninterface IKeyBinding {\n  key: IKey | IKey[];\n  winKey?: IKey | IKey[];\n  when?: (ctx: IWhenCtx) => boolean;\n  /**\n   * action name (just for debug)\n   */\n  actionName: string;\n  action: (e: KeyboardEvent) => void;\n}\n\nconst getKeyStr = (e: KeyboardEvent) => {\n  const {\n    ctrlKey = false,\n    shiftKey = false,\n    altKey = false,\n    metaKey = false,\n  } = e;\n\n  return `${ctrlKey ? 'ctrl+' : ''}${metaKey ? 'meta+' : ''}${\n    shiftKey ? 'shift+' : ''\n  }${altKey ? 'alt+' : ''}${e.code}`;\n};\n\n/**\n * key binding manager\n */\nexport class KeyBindingManager {\n  private keyBindingMap = new Map<number, IKeyBinding>();\n  private isBound = false;\n  private id = 0;\n\n  constructor(private editor: Editor) {}\n\n  private handleAction = (e: KeyboardEvent) => {\n    if (\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement\n    ) {\n      return;\n    }\n\n    let isMatch = false;\n    const ctx: IWhenCtx = {\n      isToolDragging: this.editor.toolManager.isDragging,\n    };\n\n    for (const keyBinding of this.keyBindingMap.values()) {\n      // match when\n      if (!keyBinding.when || keyBinding.when(ctx)) {\n        // match windows os\n        if (isWindows && keyBinding.winKey) {\n          if (this.isKeyMatch(keyBinding.winKey, e)) {\n            isMatch = true;\n          }\n        }\n        // match other os\n        else if (this.isKeyMatch(keyBinding.key, e)) {\n          isMatch = true;\n        }\n      }\n\n      if (isMatch) {\n        e.preventDefault();\n        console.log(`[${getKeyStr(e)}] => ${keyBinding.actionName}`);\n        keyBinding.action(e);\n        break;\n      }\n    }\n\n    if (!isMatch) {\n      console.log(`[${getKeyStr(e)}] => no match`);\n    }\n  };\n\n  private isKeyMatch(key: IKey | IKey[], e: KeyboardEvent): boolean {\n    if (Array.isArray(key)) {\n      return key.some((k) => this.isKeyMatch(k, e));\n    }\n\n    if (key.keyCode == '*') return true;\n\n    const {\n      ctrlKey = false,\n      shiftKey = false,\n      altKey = false,\n      metaKey = false,\n    } = key;\n\n    return (\n      ctrlKey == e.ctrlKey &&\n      shiftKey == e.shiftKey &&\n      altKey == e.altKey &&\n      metaKey == e.metaKey &&\n      key.keyCode == e.code\n    );\n  }\n\n  register(keybinding: IKeyBinding) {\n    const id = this.id;\n    this.keyBindingMap.set(id, keybinding);\n\n    this.id++;\n    return id;\n  }\n\n  registerWithHighPrior(keybinding: IKeyBinding) {\n    const id = this.id;\n\n    const map = new Map<number, IKeyBinding>();\n    map.set(id, keybinding);\n\n    for (const [key, val] of this.keyBindingMap) {\n      map.set(key, val);\n    }\n    this.keyBindingMap = map;\n    this.id++;\n    return id;\n  }\n\n  unregister(id: number) {\n    this.keyBindingMap.delete(id);\n  }\n\n  bindEvent() {\n    if (this.isBound) return;\n    this.isBound = true;\n    document.addEventListener('keydown', this.handleAction);\n  }\n  destroy() {\n    if (!this.isBound) return;\n    this.keyBindingMap.clear();\n    document.removeEventListener('keydown', this.handleAction);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}