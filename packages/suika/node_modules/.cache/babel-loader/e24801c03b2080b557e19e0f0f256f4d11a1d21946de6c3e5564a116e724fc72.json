{"ast":null,"code":"export function parseRGBAStr({\n  r,\n  g,\n  b,\n  a\n}) {\n  return `rgba(${r},${g},${b},${a})`;\n}\nexport function parseRGBStr({\n  r,\n  g,\n  b\n}) {\n  return `rgb(${r},${g},${b})`;\n}\n/**\n * normalize hex to `RRGGBB` string format\n */\nexport const normalizeHex = hex => {\n  hex = hex.toUpperCase();\n  const match = hex.match(/[0-9A-F]{1,6}/);\n  if (!match) {\n    return '';\n  }\n  hex = match[0];\n  if (hex.length === 6) {\n    return hex;\n  }\n  if (hex.length === 4 || hex.length === 5) {\n    hex = hex.slice(0, 3);\n  }\n  // ABC -> AABBCC\n  if (hex.length === 3) {\n    return hex.split('').map(c => c + c).join('');\n  }\n  // AB => ABABAB\n  // A -> AAAAAA\n  return hex.padEnd(6, hex);\n};\nexport const parseRGBToHex = rgb => {\n  const {\n    r,\n    g,\n    b\n  } = rgb;\n  const hex = r << 16 | g << 8 | b;\n  return hex.toString(16).toUpperCase().padStart(6, '0');\n};\nexport const parseHexToRGB = hex => {\n  hex = normalizeHex(hex);\n  if (!hex) {\n    return null;\n  }\n  const r = parseInt(hex.slice(0, 2), 16);\n  const g = parseInt(hex.slice(2, 4), 16);\n  const b = parseInt(hex.slice(4, 6), 16);\n  return {\n    r,\n    g,\n    b\n  };\n};","map":{"version":3,"names":["parseRGBAStr","r","g","b","a","parseRGBStr","normalizeHex","hex","toUpperCase","match","length","slice","split","map","c","join","padEnd","parseRGBToHex","rgb","toString","padStart","parseHexToRGB","parseInt"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/utils/color.ts"],"sourcesContent":["interface IRGB {\n  r: number;\n  g: number;\n  b: number;\n}\n\ninterface IRGBA extends IRGB {\n  a: number;\n}\n\nexport function parseRGBAStr({ r, g, b, a }: IRGBA) {\n  return `rgba(${r},${g},${b},${a})`;\n}\n\nexport function parseRGBStr({ r, g, b }: { r: number; g: number; b: number }) {\n  return `rgb(${r},${g},${b})`;\n}\n/**\n * normalize hex to `RRGGBB` string format\n */\nexport const normalizeHex = (hex: string) => {\n  hex = hex.toUpperCase();\n  const match = hex.match(/[0-9A-F]{1,6}/);\n  if (!match) {\n    return '';\n  }\n  hex = match[0];\n\n  if (hex.length === 6) {\n    return hex;\n  }\n  if (hex.length === 4 || hex.length === 5) {\n    hex = hex.slice(0, 3);\n  }\n  // ABC -> AABBCC\n  if (hex.length === 3) {\n    return hex\n      .split('')\n      .map((c) => c + c)\n      .join('');\n  }\n  // AB => ABABAB\n  // A -> AAAAAA\n  return hex.padEnd(6, hex);\n};\n\nexport const parseRGBToHex = (rgb: { r: number; g: number; b: number }) => {\n  const { r, g, b } = rgb;\n  const hex = (r << 16) | (g << 8) | b;\n  return hex.toString(16).toUpperCase().padStart(6, '0');\n};\n\nexport const parseHexToRGB = (hex: string): IRGB | null => {\n  hex = normalizeHex(hex);\n  if (!hex) {\n    return null;\n  }\n  const r = parseInt(hex.slice(0, 2), 16);\n  const g = parseInt(hex.slice(2, 4), 16);\n  const b = parseInt(hex.slice(4, 6), 16);\n  return { r, g, b };\n};\n"],"mappings":"AAUA,OAAO,SAASA,YAAYA,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEC;AAAS,CAAC,EAAE;EAClD,OAAQ,QAAOH,CAAE,IAAGC,CAAE,IAAGC,CAAE,IAAGC,CAAE,GAAE;AACpC;AAEA,OAAO,SAASC,WAAWA,CAAC;EAAEJ,CAAC;EAAEC,CAAC;EAAEC;AAAuC,CAAC,EAAE;EAC5E,OAAQ,OAAMF,CAAE,IAAGC,CAAE,IAAGC,CAAE,GAAE;AAC9B;AACA;AACA;AACA;AACA,OAAO,MAAMG,YAAY,GAAIC,GAAW,IAAK;EAC3CA,GAAG,GAAGA,GAAG,CAACC,WAAW,CAAC,CAAC;EACvB,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAAC,eAAe,CAAC;EACxC,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,EAAE;EACX;EACAF,GAAG,GAAGE,KAAK,CAAC,CAAC,CAAC;EAEd,IAAIF,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOH,GAAG;EACZ;EACA,IAAIA,GAAG,CAACG,MAAM,KAAK,CAAC,IAAIH,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;IACxCH,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACvB;EACA;EACA,IAAIJ,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOH,GAAG,CACPK,KAAK,CAAC,EAAE,CAAC,CACTC,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAGA,CAAC,CAAC,CACjBC,IAAI,CAAC,EAAE,CAAC;EACb;EACA;EACA;EACA,OAAOR,GAAG,CAACS,MAAM,CAAC,CAAC,EAAET,GAAG,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMU,aAAa,GAAIC,GAAwC,IAAK;EACzE,MAAM;IAAEjB,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGe,GAAG;EACvB,MAAMX,GAAG,GAAIN,CAAC,IAAI,EAAE,GAAKC,CAAC,IAAI,CAAE,GAAGC,CAAC;EACpC,OAAOI,GAAG,CAACY,QAAQ,CAAC,EAAE,CAAC,CAACX,WAAW,CAAC,CAAC,CAACY,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACxD,CAAC;AAED,OAAO,MAAMC,aAAa,GAAId,GAAW,IAAkB;EACzDA,GAAG,GAAGD,YAAY,CAACC,GAAG,CAAC;EACvB,IAAI,CAACA,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACA,MAAMN,CAAC,GAAGqB,QAAQ,CAACf,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACvC,MAAMT,CAAC,GAAGoB,QAAQ,CAACf,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACvC,MAAMR,CAAC,GAAGmB,QAAQ,CAACf,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACvC,OAAO;IAAEV,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}