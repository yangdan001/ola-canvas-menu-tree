{"ast":null,"code":"var _jsxFileName = \"/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/input/NumberInput.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { parseToNumber } from '../../utils/common';\nimport CustomRuleInput from './CustomRuleInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NumberInput = ({\n  value,\n  min,\n  onBlur,\n  prefix\n}) => {\n  _s();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.value = String(value);\n    }\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(CustomRuleInput, {\n    prefix: prefix,\n    parser: str => {\n      str = str.trim();\n      const number = parseToNumber(str);\n      if (!Number.isNaN(number) && number !== value) {\n        return String(number);\n      } else {\n        return false;\n      }\n    },\n    value: value,\n    onBlur: newVal => onBlur(Math.max(min !== null && min !== void 0 ? min : -Infinity, Number(newVal)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(NumberInput, \"cBQ6FQ+sf5H+lvNONLKqtm4aeQ8=\");\n_c = NumberInput;\nexport default NumberInput;\nvar _c;\n$RefreshReg$(_c, \"NumberInput\");","map":{"version":3,"names":["useEffect","useRef","parseToNumber","CustomRuleInput","jsxDEV","_jsxDEV","NumberInput","value","min","onBlur","prefix","_s","inputRef","current","String","parser","str","trim","number","Number","isNaN","newVal","Math","max","Infinity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/components/input/NumberInput.tsx"],"sourcesContent":["import { FC, useEffect, useRef } from 'react';\nimport { parseToNumber } from '../../utils/common';\nimport CustomRuleInput from './CustomRuleInput';\n\ninterface INumberInputProps {\n  value: string | number;\n  min?: number;\n  onBlur: (newValue: number) => void;\n  prefix?: React.ReactNode;\n}\n\nconst NumberInput: FC<INumberInputProps> = ({ value, min, onBlur, prefix }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.value = String(value);\n    }\n  }, [value]);\n\n  return (\n    <CustomRuleInput\n      prefix={prefix}\n      parser={(str) => {\n        str = str.trim();\n        const number = parseToNumber(str);\n        if (!Number.isNaN(number) && number !== value) {\n          return String(number);\n        } else {\n          return false;\n        }\n      }}\n      value={value}\n      onBlur={(newVal) => onBlur(Math.max(min ?? -Infinity, Number(newVal)))}\n    />\n  );\n};\n\nexport default NumberInput;\n"],"mappings":";;AAAA,SAAaA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC7C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAShD,MAAMC,WAAkC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,GAAG;EAAEC,MAAM;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAMC,QAAQ,GAAGX,MAAM,CAAmB,IAAI,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,IAAIY,QAAQ,CAACC,OAAO,EAAE;MACpBD,QAAQ,CAACC,OAAO,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAAC;IACxC;EACF,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACEF,OAAA,CAACF,eAAe;IACdO,MAAM,EAAEA,MAAO;IACfK,MAAM,EAAGC,GAAG,IAAK;MACfA,GAAG,GAAGA,GAAG,CAACC,IAAI,CAAC,CAAC;MAChB,MAAMC,MAAM,GAAGhB,aAAa,CAACc,GAAG,CAAC;MACjC,IAAI,CAACG,MAAM,CAACC,KAAK,CAACF,MAAM,CAAC,IAAIA,MAAM,KAAKX,KAAK,EAAE;QAC7C,OAAOO,MAAM,CAACI,MAAM,CAAC;MACvB,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAE;IACFX,KAAK,EAAEA,KAAM;IACbE,MAAM,EAAGY,MAAM,IAAKZ,MAAM,CAACa,IAAI,CAACC,GAAG,CAACf,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,CAACgB,QAAQ,EAAEL,MAAM,CAACE,MAAM,CAAC,CAAC;EAAE;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxE,CAAC;AAEN,CAAC;AAACjB,EAAA,CAzBIL,WAAkC;AAAAuB,EAAA,GAAlCvB,WAAkC;AA2BxC,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}