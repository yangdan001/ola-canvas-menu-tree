{"ast":null,"code":"import { drawCircle, drawSquareWithCenter, rotateInCanvas } from '../../utils/canvas';\nimport { isPointInCircle, isPointInRect } from '../../utils/graphics';\nimport { transformRotate } from '../../utils/transform';\n/**\n * draw transform handle\n *\n * rotation and scale\n */\nexport class TransformHandle {\n  constructor(editor) {\n    this.editor = editor;\n    this.handle = null;\n  }\n  draw(selectedElementsBBox) {\n    const handle = this.getTransformHandle(selectedElementsBBox);\n    this.handle = handle;\n    if (handle) {\n      const ctx = this.editor.ctx;\n      const setting = this.editor.setting;\n      const selectedElements = this.editor.selectedElements.getItems();\n      const elementsRotation = selectedElements.length === 1 ? selectedElements[0].rotation || 0 : 0;\n      ctx.save();\n      ctx.strokeStyle = setting.get('handleRotationStroke');\n      ctx.fillStyle = setting.get('handleRotationFill');\n      ctx.lineWidth = setting.get('handleStrokeWidth');\n\n      // (1) draw rotation handle\n      const rotationPos = this.editor.sceneCoordsToViewport(handle.rotation.x, handle.rotation.y);\n\n      // (2) draw scale handle\n      const size = setting.get('handleSize');\n      drawCircle(ctx, rotationPos.x, rotationPos.y, size / 2);\n      // nw（左上）\n      const startTf = ctx.getTransform();\n      const nwPos = this.editor.sceneCoordsToViewport(handle.nw.x, handle.nw.y);\n      rotateInCanvas(ctx, elementsRotation, nwPos.x, nwPos.y);\n      drawSquareWithCenter(ctx, nwPos.x, nwPos.y, size);\n      ctx.setTransform(startTf);\n      // ne（右上）\n      const nePos = this.editor.sceneCoordsToViewport(handle.ne.x, handle.ne.y);\n      rotateInCanvas(ctx, elementsRotation, nePos.x, nePos.y);\n      drawSquareWithCenter(ctx, nePos.x, nePos.y, size);\n      ctx.setTransform(startTf);\n      // se（右下）\n      const sePos = this.editor.sceneCoordsToViewport(handle.se.x, handle.se.y);\n      rotateInCanvas(ctx, elementsRotation, sePos.x, sePos.y);\n      drawSquareWithCenter(ctx, sePos.x, sePos.y, size);\n      ctx.setTransform(startTf);\n      // sw（左下）\n      const swPos = this.editor.sceneCoordsToViewport(handle.sw.x, handle.sw.y);\n      rotateInCanvas(ctx, elementsRotation, swPos.x, swPos.y);\n      drawSquareWithCenter(ctx, swPos.x, swPos.y, size);\n      ctx.setTransform(startTf);\n      ctx.restore();\n    }\n  }\n  getTransformHandle(selectedElementsBBox) {\n    if (selectedElementsBBox === null) {\n      return null;\n    }\n    /**\n     * rotation: 旋转方向为正北方向\n     * ne 东北 （右上）（西：west、北：north、东：east、西：west）\n     * nw 西北 （左上）\n     * sw 西南 south west（左下）\n     * se 东南 （右下）\n     */\n    const selectedElements = this.editor.selectedElements.getItems();\n    const zoom = this.editor.zoomManager.getZoom();\n    const setting = this.editor.setting;\n    if (selectedElements.length === 0) {\n      console.error('根据逻辑分支，代码走到这里 selectedElements.length 不可能为 0，请给我提 issue');\n      return null;\n    }\n    // 单个元素\n    if (selectedElements.length === 1) {\n      const singleSelectedElement = selectedElements[0];\n      const {\n        x,\n        y,\n        width,\n        height\n      } = singleSelectedElement.getBBoxWithoutRotation();\n      // 旋转控制点\n      let rotation = {\n        x: x + width / 2,\n        y: y - setting.get('handleRotationLineLength') / zoom\n      };\n      // 左上\n      let nw = {\n        x,\n        y\n      };\n      // 右上\n      let ne = {\n        x: x + width,\n        y\n      };\n      // se（右下）\n      let se = {\n        x: x + width,\n        y: y + height\n      };\n      let sw = {\n        x,\n        y: y + height\n      };\n      const [cx, cy] = this.editor.selectedElements.getCenterPoint();\n      if (singleSelectedElement.rotation) {\n        rotation = transformRotate(rotation.x, rotation.y, singleSelectedElement.rotation, cx, cy);\n        nw = transformRotate(nw.x, nw.y, singleSelectedElement.rotation, cx, cy);\n        ne = transformRotate(ne.x, ne.y, singleSelectedElement.rotation, cx, cy);\n        se = transformRotate(se.x, se.y, singleSelectedElement.rotation, cx, cy);\n        sw = transformRotate(sw.x, sw.y, singleSelectedElement.rotation, cx, cy);\n      }\n      return {\n        rotation,\n        nw,\n        ne,\n        se,\n        sw\n      };\n    }\n    // 多个图形被选中\n    else {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = selectedElementsBBox;\n      const rotation = {\n        x: x + width / 2,\n        y: y - setting.get('handleRotationLineLength') / zoom\n      };\n      const nw = {\n        x,\n        y\n      };\n      const ne = {\n        x: x + width,\n        y\n      };\n      const se = {\n        x: x + width,\n        y: y + height\n      };\n      const sw = {\n        x,\n        y: y + height\n      };\n      return {\n        rotation,\n        nw,\n        ne,\n        se,\n        sw\n      };\n    }\n  }\n  getNameByPoint(hitPoint) {\n    const handle = this.handle;\n    if (!handle) {\n      return undefined;\n    }\n    if (this.isInRotationHandle(hitPoint)) {\n      return 'rotation';\n    }\n\n    // 选中图形的旋转角度。。\n    const elRotation = this.editor.selectedElements.getRotation();\n    const setting = this.editor.setting;\n    const zoom = this.editor.zoomManager.getZoom();\n    const size = setting.get('handleSize') / zoom;\n\n    // 是否在缩放控制点上\n    let key;\n    for (key in handle) {\n      if (key === 'rotation') {\n        continue;\n      }\n      const ctrlPoint = handle[key];\n      let rotatedHitPointX = hitPoint.x;\n      let rotatedHitPointY = hitPoint.y;\n      if (elRotation) {\n        const rotatedHitPoint = transformRotate(hitPoint.x, hitPoint.y, elRotation, ctrlPoint.x, ctrlPoint.y);\n        rotatedHitPointX = rotatedHitPoint.x;\n        rotatedHitPointY = rotatedHitPoint.y;\n      }\n      if (isPointInRect({\n        x: rotatedHitPointX,\n        y: rotatedHitPointY\n      }, {\n        x: ctrlPoint.x - size / 2,\n        y: ctrlPoint.y - size / 2,\n        width: size,\n        height: size\n      }, setting.get('handleStrokePadding') / zoom)) {\n        return key;\n      }\n    }\n  }\n  isInRotationHandle(point) {\n    const transformHandle = this.handle;\n    if (!transformHandle) {\n      return false;\n    }\n    // 计算旋转后的 x 和 y\n    const rotationPoint = transformHandle.rotation;\n    const zoom = this.editor.zoomManager.getZoom();\n    const size = this.editor.setting.get('handleSize');\n    const padding = this.editor.setting.get('handleStrokePadding');\n    return isPointInCircle(point, {\n      x: rotationPoint.x,\n      y: rotationPoint.y,\n      radius: (size / 2 + padding) / zoom\n    });\n  }\n}","map":{"version":3,"names":["drawCircle","drawSquareWithCenter","rotateInCanvas","isPointInCircle","isPointInRect","transformRotate","TransformHandle","constructor","editor","handle","draw","selectedElementsBBox","getTransformHandle","ctx","setting","selectedElements","getItems","elementsRotation","length","rotation","save","strokeStyle","get","fillStyle","lineWidth","rotationPos","sceneCoordsToViewport","x","y","size","startTf","getTransform","nwPos","nw","setTransform","nePos","ne","sePos","se","swPos","sw","restore","zoom","zoomManager","getZoom","console","error","singleSelectedElement","width","height","getBBoxWithoutRotation","cx","cy","getCenterPoint","getNameByPoint","hitPoint","undefined","isInRotationHandle","elRotation","getRotation","key","ctrlPoint","rotatedHitPointX","rotatedHitPointY","rotatedHitPoint","point","transformHandle","rotationPoint","padding","radius"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/scene/transform_handle.ts"],"sourcesContent":["import { Editor } from '../editor';\nimport { IBox, IPoint, IRect } from '../../type';\nimport {\n  drawCircle,\n  drawSquareWithCenter,\n  rotateInCanvas,\n} from '../../utils/canvas';\nimport { isPointInCircle, isPointInRect } from '../../utils/graphics';\nimport { transformRotate } from '../../utils/transform';\n\nexport type HandleName = 'rotation' | 'nw' | 'ne' | 'se' | 'sw';\n\n/**\n * draw transform handle\n *\n * rotation and scale\n */\nexport class TransformHandle {\n  handle: {\n    rotation: IPoint;\n    nw: IPoint;\n    ne: IPoint;\n    se: IPoint;\n    sw: IPoint;\n  } | null = null;\n\n  constructor(private editor: Editor) {}\n  draw(selectedElementsBBox: IRect | null) {\n    const handle = this.getTransformHandle(selectedElementsBBox);\n    this.handle = handle;\n\n    if (handle) {\n      const ctx = this.editor.ctx;\n      const setting = this.editor.setting;\n\n      const selectedElements = this.editor.selectedElements.getItems();\n      const elementsRotation =\n        selectedElements.length === 1 ? selectedElements[0].rotation || 0 : 0;\n\n      ctx.save();\n      ctx.strokeStyle = setting.get('handleRotationStroke');\n      ctx.fillStyle = setting.get('handleRotationFill');\n      ctx.lineWidth = setting.get('handleStrokeWidth');\n\n      // (1) draw rotation handle\n      const rotationPos = this.editor.sceneCoordsToViewport(\n        handle.rotation.x,\n        handle.rotation.y,\n      );\n\n      // (2) draw scale handle\n      const size = setting.get('handleSize');\n      drawCircle(ctx, rotationPos.x, rotationPos.y, size / 2);\n      // nw（左上）\n      const startTf = ctx.getTransform();\n      const nwPos = this.editor.sceneCoordsToViewport(handle.nw.x, handle.nw.y);\n      rotateInCanvas(ctx, elementsRotation, nwPos.x, nwPos.y);\n      drawSquareWithCenter(ctx, nwPos.x, nwPos.y, size);\n      ctx.setTransform(startTf);\n      // ne（右上）\n      const nePos = this.editor.sceneCoordsToViewport(handle.ne.x, handle.ne.y);\n      rotateInCanvas(ctx, elementsRotation, nePos.x, nePos.y);\n      drawSquareWithCenter(ctx, nePos.x, nePos.y, size);\n      ctx.setTransform(startTf);\n      // se（右下）\n      const sePos = this.editor.sceneCoordsToViewport(handle.se.x, handle.se.y);\n      rotateInCanvas(ctx, elementsRotation, sePos.x, sePos.y);\n      drawSquareWithCenter(ctx, sePos.x, sePos.y, size);\n      ctx.setTransform(startTf);\n      // sw（左下）\n      const swPos = this.editor.sceneCoordsToViewport(handle.sw.x, handle.sw.y);\n      rotateInCanvas(ctx, elementsRotation, swPos.x, swPos.y);\n      drawSquareWithCenter(ctx, swPos.x, swPos.y, size);\n      ctx.setTransform(startTf);\n\n      ctx.restore();\n    }\n  }\n\n  private getTransformHandle(selectedElementsBBox: IBox | null) {\n    if (selectedElementsBBox === null) {\n      return null;\n    }\n    /**\n     * rotation: 旋转方向为正北方向\n     * ne 东北 （右上）（西：west、北：north、东：east、西：west）\n     * nw 西北 （左上）\n     * sw 西南 south west（左下）\n     * se 东南 （右下）\n     */\n    const selectedElements = this.editor.selectedElements.getItems();\n    const zoom = this.editor.zoomManager.getZoom();\n    const setting = this.editor.setting;\n\n    if (selectedElements.length === 0) {\n      console.error(\n        '根据逻辑分支，代码走到这里 selectedElements.length 不可能为 0，请给我提 issue',\n      );\n      return null;\n    }\n    // 单个元素\n    if (selectedElements.length === 1) {\n      const singleSelectedElement = selectedElements[0];\n      const { x, y, width, height } =\n        singleSelectedElement.getBBoxWithoutRotation();\n      // 旋转控制点\n      let rotation = {\n        x: x + width / 2,\n        y: y - setting.get('handleRotationLineLength') / zoom,\n      };\n      // 左上\n      let nw = { x, y };\n      // 右上\n      let ne = { x: x + width, y };\n      // se（右下）\n      let se = { x: x + width, y: y + height };\n      let sw = { x, y: y + height };\n      const [cx, cy] = this.editor.selectedElements.getCenterPoint();\n      if (singleSelectedElement.rotation) {\n        rotation = transformRotate(\n          rotation.x,\n          rotation.y,\n          singleSelectedElement.rotation,\n          cx,\n          cy,\n        );\n\n        nw = transformRotate(\n          nw.x,\n          nw.y,\n          singleSelectedElement.rotation,\n          cx,\n          cy,\n        );\n\n        ne = transformRotate(\n          ne.x,\n          ne.y,\n          singleSelectedElement.rotation,\n          cx,\n          cy,\n        );\n        se = transformRotate(\n          se.x,\n          se.y,\n          singleSelectedElement.rotation,\n          cx,\n          cy,\n        );\n\n        sw = transformRotate(\n          sw.x,\n          sw.y,\n          singleSelectedElement.rotation,\n          cx,\n          cy,\n        );\n      }\n\n      return {\n        rotation,\n        nw,\n        ne,\n        se,\n        sw,\n      };\n    }\n    // 多个图形被选中\n    else {\n      const { x, y, width, height } = selectedElementsBBox;\n      const rotation = {\n        x: x + width / 2,\n        y: y - setting.get('handleRotationLineLength') / zoom,\n      };\n      const nw = { x, y };\n      const ne = { x: x + width, y };\n      const se = { x: x + width, y: y + height };\n      const sw = { x, y: y + height };\n\n      return {\n        rotation,\n        nw,\n        ne,\n        se,\n        sw,\n      };\n    }\n  }\n  getNameByPoint(hitPoint: IPoint) {\n    const handle = this.handle;\n    if (!handle) {\n      return undefined;\n    }\n    if (this.isInRotationHandle(hitPoint)) {\n      return 'rotation';\n    }\n\n    // 选中图形的旋转角度。。\n    const elRotation = this.editor.selectedElements.getRotation();\n    const setting = this.editor.setting;\n    const zoom = this.editor.zoomManager.getZoom();\n    const size = setting.get('handleSize') / zoom;\n\n    // 是否在缩放控制点上\n    let key: keyof typeof handle;\n    for (key in handle) {\n      if (key === 'rotation') {\n        continue;\n      }\n\n      const ctrlPoint = handle[key];\n\n      let rotatedHitPointX = hitPoint.x;\n      let rotatedHitPointY = hitPoint.y;\n      if (elRotation) {\n        const rotatedHitPoint = transformRotate(\n          hitPoint.x,\n          hitPoint.y,\n          elRotation,\n          ctrlPoint.x,\n          ctrlPoint.y,\n        );\n        rotatedHitPointX = rotatedHitPoint.x;\n        rotatedHitPointY = rotatedHitPoint.y;\n      }\n      if (\n        isPointInRect(\n          { x: rotatedHitPointX, y: rotatedHitPointY },\n          {\n            x: ctrlPoint.x - size / 2,\n            y: ctrlPoint.y - size / 2,\n            width: size,\n            height: size,\n          },\n          setting.get('handleStrokePadding') / zoom,\n        )\n      ) {\n        return key;\n      }\n    }\n  }\n  private isInRotationHandle(point: IPoint) {\n    const transformHandle = this.handle;\n    if (!transformHandle) {\n      return false;\n    }\n    // 计算旋转后的 x 和 y\n    const rotationPoint = transformHandle.rotation;\n    const zoom = this.editor.zoomManager.getZoom();\n\n    const size = this.editor.setting.get('handleSize');\n    const padding = this.editor.setting.get('handleStrokePadding');\n    return isPointInCircle(point, {\n      x: rotationPoint.x,\n      y: rotationPoint.y,\n      radius: (size / 2 + padding) / zoom,\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}