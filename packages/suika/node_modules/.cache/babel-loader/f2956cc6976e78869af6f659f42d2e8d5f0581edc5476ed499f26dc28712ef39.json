{"ast":null,"code":"import { useCallback, useRef, useState } from 'react';\nconst useDynamicList = (initialList = []) => {\n  const counterRef = useRef(-1);\n  const keyList = useRef([]);\n  const setKey = useCallback(index => {\n    counterRef.current += 1;\n    keyList.current.splice(index, 0, counterRef.current);\n  }, []);\n  const [list, setList] = useState(() => {\n    initialList.forEach((_, index) => {\n      setKey(index);\n    });\n    return initialList;\n  });\n  const resetList = useCallback(newList => {\n    keyList.current = [];\n    setList(() => {\n      newList.forEach((_, index) => {\n        setKey(index);\n      });\n      return newList;\n    });\n  }, []);\n  const insert = useCallback((index, item) => {\n    setList(l => {\n      const temp = [...l];\n      temp.splice(index, 0, item);\n      setKey(index);\n      return temp;\n    });\n  }, []);\n  const getKey = useCallback(index => keyList.current[index], []);\n  const getIndex = useCallback(key => keyList.current.findIndex(ele => ele === key), []);\n  const merge = useCallback((index, items) => {\n    setList(l => {\n      const temp = [...l];\n      items.forEach((_, i) => {\n        setKey(index + i);\n      });\n      temp.splice(index, 0, ...items);\n      return temp;\n    });\n  }, []);\n  const replace = useCallback((index, item) => {\n    setList(l => {\n      const temp = [...l];\n      temp[index] = item;\n      return temp;\n    });\n  }, []);\n  const remove = useCallback(index => {\n    setList(l => {\n      const temp = [...l];\n      temp.splice(index, 1);\n      // remove keys if necessary\n      try {\n        keyList.current.splice(index, 1);\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  const move = useCallback((oldIndex, newIndex) => {\n    if (oldIndex === newIndex) {\n      return;\n    }\n    setList(l => {\n      const newList = [...l];\n      const temp = newList.filter((_, index) => index !== oldIndex);\n      temp.splice(newIndex, 0, newList[oldIndex]);\n      // move keys if necessary\n      try {\n        const keyTemp = keyList.current.filter((_, index) => index !== oldIndex);\n        keyTemp.splice(newIndex, 0, keyList.current[oldIndex]);\n        keyList.current = keyTemp;\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  const push = useCallback(item => {\n    setList(l => {\n      setKey(l.length);\n      return l.concat([item]);\n    });\n  }, []);\n  const pop = useCallback(() => {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(0, keyList.current.length - 1);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(l => l.slice(0, l.length - 1));\n  }, []);\n  const unshift = useCallback(item => {\n    setList(l => {\n      setKey(0);\n      return [item].concat(l);\n    });\n  }, []);\n  const shift = useCallback(() => {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(1, keyList.current.length);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(l => l.slice(1, l.length));\n  }, []);\n  const sortList = useCallback(result => result.map((item, index) => ({\n    key: index,\n    item\n  })) // add index into obj\n  .sort((a, b) => getIndex(a.key) - getIndex(b.key)) // sort based on the index of table\n  .filter(item => !!item.item) // remove undefined(s)\n  .map(item => item.item),\n  // retrive the data\n  []);\n  return {\n    list,\n    insert,\n    merge,\n    replace,\n    remove,\n    getKey,\n    getIndex,\n    move,\n    push,\n    pop,\n    unshift,\n    shift,\n    sortList,\n    resetList\n  };\n};\nexport default useDynamicList;","map":{"version":3,"names":["useCallback","useRef","useState","useDynamicList","initialList","counterRef","keyList","setKey","index","current","splice","list","setList","forEach","_","resetList","newList","insert","item","l","temp","getKey","getIndex","key","findIndex","ele","merge","items","i","replace","remove","e","console","error","move","oldIndex","newIndex","filter","keyTemp","push","length","concat","pop","slice","unshift","shift","sortList","result","map","sort","a","b"],"sources":["/Users/yangdan/zf-workspace/react/suika/node_modules/.pnpm/registry.npmmirror.com+ahooks@3.7.4_react@18.2.0/node_modules/ahooks/es/useDynamicList/index.js"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nconst useDynamicList = (initialList = []) => {\n  const counterRef = useRef(-1);\n  const keyList = useRef([]);\n  const setKey = useCallback(index => {\n    counterRef.current += 1;\n    keyList.current.splice(index, 0, counterRef.current);\n  }, []);\n  const [list, setList] = useState(() => {\n    initialList.forEach((_, index) => {\n      setKey(index);\n    });\n    return initialList;\n  });\n  const resetList = useCallback(newList => {\n    keyList.current = [];\n    setList(() => {\n      newList.forEach((_, index) => {\n        setKey(index);\n      });\n      return newList;\n    });\n  }, []);\n  const insert = useCallback((index, item) => {\n    setList(l => {\n      const temp = [...l];\n      temp.splice(index, 0, item);\n      setKey(index);\n      return temp;\n    });\n  }, []);\n  const getKey = useCallback(index => keyList.current[index], []);\n  const getIndex = useCallback(key => keyList.current.findIndex(ele => ele === key), []);\n  const merge = useCallback((index, items) => {\n    setList(l => {\n      const temp = [...l];\n      items.forEach((_, i) => {\n        setKey(index + i);\n      });\n      temp.splice(index, 0, ...items);\n      return temp;\n    });\n  }, []);\n  const replace = useCallback((index, item) => {\n    setList(l => {\n      const temp = [...l];\n      temp[index] = item;\n      return temp;\n    });\n  }, []);\n  const remove = useCallback(index => {\n    setList(l => {\n      const temp = [...l];\n      temp.splice(index, 1);\n      // remove keys if necessary\n      try {\n        keyList.current.splice(index, 1);\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  const move = useCallback((oldIndex, newIndex) => {\n    if (oldIndex === newIndex) {\n      return;\n    }\n    setList(l => {\n      const newList = [...l];\n      const temp = newList.filter((_, index) => index !== oldIndex);\n      temp.splice(newIndex, 0, newList[oldIndex]);\n      // move keys if necessary\n      try {\n        const keyTemp = keyList.current.filter((_, index) => index !== oldIndex);\n        keyTemp.splice(newIndex, 0, keyList.current[oldIndex]);\n        keyList.current = keyTemp;\n      } catch (e) {\n        console.error(e);\n      }\n      return temp;\n    });\n  }, []);\n  const push = useCallback(item => {\n    setList(l => {\n      setKey(l.length);\n      return l.concat([item]);\n    });\n  }, []);\n  const pop = useCallback(() => {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(0, keyList.current.length - 1);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(l => l.slice(0, l.length - 1));\n  }, []);\n  const unshift = useCallback(item => {\n    setList(l => {\n      setKey(0);\n      return [item].concat(l);\n    });\n  }, []);\n  const shift = useCallback(() => {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(1, keyList.current.length);\n    } catch (e) {\n      console.error(e);\n    }\n    setList(l => l.slice(1, l.length));\n  }, []);\n  const sortList = useCallback(result => result.map((item, index) => ({\n    key: index,\n    item\n  })) // add index into obj\n  .sort((a, b) => getIndex(a.key) - getIndex(b.key)) // sort based on the index of table\n  .filter(item => !!item.item) // remove undefined(s)\n  .map(item => item.item),\n  // retrive the data\n  []);\n  return {\n    list,\n    insert,\n    merge,\n    replace,\n    remove,\n    getKey,\n    getIndex,\n    move,\n    push,\n    pop,\n    unshift,\n    shift,\n    sortList,\n    resetList\n  };\n};\nexport default useDynamicList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}