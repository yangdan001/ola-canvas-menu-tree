{"ast":null,"code":"import hotkeys from 'hotkeys-js';\nimport { noop } from '../utils/common';\nimport { arrMap } from '../utils/array_util';\nimport omit from 'lodash.omit';\nimport { AddShapeCommand } from './commands/add_shape';\nimport { Graph } from './scene/graph';\nexport class ClipboardManager {\n  constructor(editor) {\n    this.editor = editor;\n    this.unbindEvents = noop;\n    this.hasBindEvents = false;\n  }\n  bindEvents() {\n    if (this.hasBindEvents) {\n      console.log('ClipboardManager has bind events, please destroy first');\n      return;\n    }\n    this.hasBindEvents = true;\n    const copyHandler = () => {\n      this.copy();\n    };\n    const pasteHandler = e => {\n      const event = e;\n      const clipboardData = event.clipboardData;\n      if (!clipboardData) {\n        return;\n      }\n      const pastedData = clipboardData.getData('Text');\n      this.addGraphsFromClipboard(pastedData);\n    };\n    this.editor.keybindingManager.register({\n      key: {\n        metaKey: true,\n        keyCode: 'KeyC'\n      },\n      winKey: {\n        ctrlKey: true,\n        keyCode: 'KeyC'\n      },\n      actionName: 'Copy',\n      action: copyHandler\n    });\n\n    // TODO: paste by content menu\n    window.addEventListener('paste', pasteHandler);\n    this.unbindEvents = () => {\n      hotkeys.unbind('cmd+c, ctrl+c', copyHandler);\n      window.removeEventListener('paste', pasteHandler);\n    };\n  }\n  copy() {\n    const snapshot = this.getSelectedItemsSnapshot();\n    if (!snapshot) {\n      return;\n    }\n\n    // TODO: write to blob data\n    navigator.clipboard.writeText(snapshot).then(() => {\n      console.log('copied');\n    });\n  }\n\n  /**\n   * paste at special coords\n   */\n  pasteAt(x, y) {\n    navigator.clipboard.readText().then(pastedData => {\n      this.addGraphsFromClipboard(pastedData, x, y);\n    });\n  }\n  getSelectedItemsSnapshot() {\n    const selectedItems = this.editor.selectedElements.getItems();\n    if (selectedItems.length === 0) {\n      return null;\n    }\n\n    // remove id attr\n    const copiedData = arrMap(selectedItems, item => omit(item.getAttrs(), 'id'));\n    return JSON.stringify({\n      appVersion: this.editor.appVersion,\n      paperId: this.editor.paperId,\n      data: JSON.stringify(copiedData)\n    });\n  }\n  addGraphsFromClipboard(dataStr, x, y) {\n    let pastedData = null;\n    try {\n      pastedData = JSON.parse(dataStr);\n    } catch (e) {\n      // TODO: create text graph from pastedData\n      return;\n    }\n\n    // TODO: more format validate\n    if (!(pastedData && pastedData.appVersion.startsWith('suika-editor') && pastedData.data)) {\n      // TODO: create text graph from pastedData\n      return;\n    }\n    const editor = this.editor;\n    const pastedGraphs = editor.sceneGraph.addGraphsByStr(pastedData.data);\n    if (pastedGraphs.length === 0) {\n      return;\n    }\n\n    // TODO: duplicated objectName should be renamed\n    editor.commandManager.pushCommand(new AddShapeCommand('pasted graphs', editor, pastedGraphs));\n    editor.selectedElements.setItems(pastedGraphs);\n    const bbox = editor.selectedElements.getBBox();\n    if ((x === undefined || y === undefined) && pastedData.paperId !== editor.paperId) {\n      const vwCenter = this.editor.viewportManager.getCenter();\n      x = vwCenter.x - bbox.width / 2;\n      y = vwCenter.y - bbox.height / 2;\n    }\n    if (x !== undefined && y !== undefined) {\n      const dx = x - bbox.x;\n      const dy = y - bbox.y;\n      if (dx || dy) {\n        Graph.dMove(pastedGraphs, dx, dy);\n      }\n    }\n    editor.sceneGraph.render();\n  }\n  destroy() {\n    this.hasBindEvents = false;\n    this.unbindEvents();\n  }\n}","map":{"version":3,"names":["hotkeys","noop","arrMap","omit","AddShapeCommand","Graph","ClipboardManager","constructor","editor","unbindEvents","hasBindEvents","bindEvents","console","log","copyHandler","copy","pasteHandler","e","event","clipboardData","pastedData","getData","addGraphsFromClipboard","keybindingManager","register","key","metaKey","keyCode","winKey","ctrlKey","actionName","action","window","addEventListener","unbind","removeEventListener","snapshot","getSelectedItemsSnapshot","navigator","clipboard","writeText","then","pasteAt","x","y","readText","selectedItems","selectedElements","getItems","length","copiedData","item","getAttrs","JSON","stringify","appVersion","paperId","data","dataStr","parse","startsWith","pastedGraphs","sceneGraph","addGraphsByStr","commandManager","pushCommand","setItems","bbox","getBBox","undefined","vwCenter","viewportManager","getCenter","width","height","dx","dy","dMove","render","destroy"],"sources":["/Users/yangdan/zf-workspace/react/suika/packages/suika/src/editor/clipboard.ts"],"sourcesContent":["import { Editor } from './editor';\nimport hotkeys from 'hotkeys-js';\nimport { noop } from '../utils/common';\nimport { arrMap } from '../utils/array_util';\nimport omit from 'lodash.omit';\nimport { AddShapeCommand } from './commands/add_shape';\nimport { IEditorPaperData } from '../type';\nimport { Graph } from './scene/graph';\n\nexport class ClipboardManager {\n  private unbindEvents = noop;\n  private hasBindEvents = false;\n  constructor(private editor: Editor) {}\n\n  bindEvents() {\n    if (this.hasBindEvents) {\n      console.log('ClipboardManager has bind events, please destroy first');\n      return;\n    }\n    this.hasBindEvents = true;\n\n    const copyHandler = () => {\n      this.copy();\n    };\n\n    const pasteHandler = (e: Event) => {\n      const event = e as ClipboardEvent;\n      const clipboardData = event.clipboardData;\n      if (!clipboardData) {\n        return;\n      }\n      const pastedData = clipboardData.getData('Text');\n      this.addGraphsFromClipboard(pastedData);\n    };\n\n    this.editor.keybindingManager.register({\n      key: { metaKey: true, keyCode: 'KeyC' },\n      winKey: { ctrlKey: true, keyCode: 'KeyC' },\n      actionName: 'Copy',\n      action: copyHandler,\n    });\n\n    // TODO: paste by content menu\n    window.addEventListener('paste', pasteHandler);\n\n    this.unbindEvents = () => {\n      hotkeys.unbind('cmd+c, ctrl+c', copyHandler);\n      window.removeEventListener('paste', pasteHandler);\n    };\n  }\n\n  copy() {\n    const snapshot = this.getSelectedItemsSnapshot();\n    if (!snapshot) {\n      return;\n    }\n\n    // TODO: write to blob data\n    navigator.clipboard.writeText(snapshot).then(() => {\n      console.log('copied');\n    });\n  }\n\n  /**\n   * paste at special coords\n   */\n  pasteAt(x: number, y: number) {\n    navigator.clipboard.readText().then((pastedData) => {\n      this.addGraphsFromClipboard(pastedData, x, y);\n    });\n  }\n\n  private getSelectedItemsSnapshot() {\n    const selectedItems = this.editor.selectedElements.getItems();\n    if (selectedItems.length === 0) {\n      return null;\n    }\n\n    // remove id attr\n    const copiedData = arrMap(selectedItems, (item) =>\n      omit(item.getAttrs(), 'id'),\n    );\n\n    return JSON.stringify({\n      appVersion: this.editor.appVersion,\n      paperId: this.editor.paperId,\n      data: JSON.stringify(copiedData),\n    });\n  }\n\n  private addGraphsFromClipboard(dataStr: string): void;\n  private addGraphsFromClipboard(dataStr: string, x: number, y: number): void;\n  private addGraphsFromClipboard(dataStr: string, x?: number, y?: number) {\n    let pastedData: IEditorPaperData | null = null;\n    try {\n      pastedData = JSON.parse(dataStr);\n    } catch (e) {\n      // TODO: create text graph from pastedData\n      return;\n    }\n\n    // TODO: more format validate\n    if (\n      !(\n        pastedData &&\n        pastedData.appVersion.startsWith('suika-editor') &&\n        pastedData.data\n      )\n    ) {\n      // TODO: create text graph from pastedData\n      return;\n    }\n\n    const editor = this.editor;\n    const pastedGraphs = editor.sceneGraph.addGraphsByStr(pastedData.data);\n    if (pastedGraphs.length === 0) {\n      return;\n    }\n\n    // TODO: duplicated objectName should be renamed\n    editor.commandManager.pushCommand(\n      new AddShapeCommand('pasted graphs', editor, pastedGraphs),\n    );\n    editor.selectedElements.setItems(pastedGraphs);\n\n    const bbox = editor.selectedElements.getBBox()!;\n    if (\n      (x === undefined || y === undefined) &&\n      pastedData.paperId !== editor.paperId\n    ) {\n      const vwCenter = this.editor.viewportManager.getCenter();\n      x = vwCenter.x - bbox.width / 2;\n      y = vwCenter.y - bbox.height / 2;\n    }\n\n    if (x !== undefined && y !== undefined) {\n      const dx = x - bbox.x;\n      const dy = y - bbox.y;\n      if (dx || dy) {\n        Graph.dMove(pastedGraphs, dx, dy);\n      }\n    }\n    editor.sceneGraph.render();\n  }\n\n  destroy() {\n    this.hasBindEvents = false;\n    this.unbindEvents();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}